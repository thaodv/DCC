{"version":3,"sources":["webpack:///./node_modules/abi-decoder/node_modules/web3/lib/utils/utils.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/solidity/formatters.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/solidity/type.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/formatters.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/method.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/property.js","webpack:///./node_modules/abi-decoder/node_modules/web3/node_modules/bignumber.js/bignumber.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/utils/sha3.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/errors.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/solidity/coder.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/utils/config.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/iban.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/filter.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/methods/watches.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/solidity/param.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/jsonrpc.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/event.js","webpack:///./node_modules/abi-decoder/index.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/solidity/address.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/solidity/bool.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/solidity/int.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/solidity/uint.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/solidity/dynamicbytes.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/solidity/string.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/solidity/real.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/solidity/ureal.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/solidity/bytes.js","webpack:///./node_modules/abi-decoder/node_modules/web3/index.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/requestmanager.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/methods/eth.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/contract.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/function.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/allevents.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/syncing.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/namereg.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/transfer.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/methods/db.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/methods/shh.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/methods/net.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/methods/personal.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/methods/swarm.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/settings.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/extend.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/batch.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/httpprovider.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/utils/browser-xhr.js","webpack:///./node_modules/xhr2/lib/browser.js","webpack:///./node_modules/abi-decoder/node_modules/web3/lib/web3/ipcprovider.js"],"names":["BigNumber","__webpack_require__","sha3","utf8","unitMap","noether","wei","kwei","Kwei","babbage","femtoether","mwei","Mwei","lovelace","picoether","gwei","Gwei","shannon","nanoether","nano","szabo","microether","micro","finney","milliether","milli","ether","kether","grand","mether","gether","tether","padLeft","string","chars","sign","Array","length","join","padRight","toUtf8","hex","str","i","l","substring","code","parseInt","substr","String","fromCharCode","decode","toAscii","fromUtf8","encode","charCodeAt","n","toString","fromAscii","transformToFullName","json","name","indexOf","typeName","inputs","map","type","extractDisplayName","extractTypeName","replace","toDecimal","value","toBigNumber","toNumber","fromDecimal","number","result","lessThan","toHex","val","isBoolean","isBigNumber","isObject","JSON","stringify","isString","isFinite","getValueOfUnit","unit","toLowerCase","unitValue","undefined","Error","fromWei","returnValue","dividedBy","toWei","times","toTwosComplement","bigNumber","round","plus","isStrictAddress","address","test","isAddress","isChecksumAddress","addressHash","toUpperCase","toChecksumAddress","checksumAddress","toAddress","object","constructor","isFunction","isArray","isJson","parse","e","isBloom","bloom","isTopic","topic","module","exports","utils","c","SolidityParam","formatInputInt","config","ETH_BIGNUMBER_ROUNDING_MODE","formatInputBytes","Math","floor","formatInputDynamicBytes","formatInputString","formatInputBool","formatInputReal","pow","signedIsNegative","formatOutputInt","param","staticPart","minus","formatOutputUInt","formatOutputReal","formatOutputUReal","formatOutputBool","formatOutputBytes","matches","match","size","slice","formatOutputDynamicBytes","dynamicPart","formatOutputString","formatOutputAddress","f","SolidityType","this","_inputFormatter","inputFormatter","_outputFormatter","outputFormatter","prototype","isType","staticPartLength","nestedTypes","reduce","previous","current","isDynamicArray","isStaticArray","staticArrayLength","nestedName","isDynamicType","self","push","forEach","v","bytes","offset","arrayOffset","arrayStart","nestedStaticPartLength","roundedNestedStaticPartLength","dynamicOffset","roundedLength","Iban","outputBigNumberFormatter","isPredefinedBlockNumber","blockNumber","inputDefaultBlockNumberFormatter","defaultBlock","inputBlockNumberFormatter","inputCallFormatter","options","from","defaultAccount","inputAddressFormatter","to","filter","key","inputTransactionFormatter","outputTransactionFormatter","tx","transactionIndex","nonce","gas","gasPrice","outputTransactionReceiptFormatter","receipt","cumulativeGasUsed","gasUsed","logs","log","outputLogFormatter","outputBlockFormatter","block","gasLimit","timestamp","difficulty","totalDifficulty","transactions","item","logIndex","inputPostFormatter","post","ttl","workToProve","priority","topics","outputPostFormatter","expiry","sent","workProved","iban","isValid","isDirect","outputSyncingFormatter","startingBlock","currentBlock","highestBlock","knownStates","pulledStates","errors","Method","call","params","requestManager","setRequestManager","rm","getCall","args","extractCallback","pop","validateArgs","InvalidNumberOfParams","formatInput","formatter","index","formatOutput","toPayload","callback","method","attachToObject","obj","func","buildCall","split","send","payload","arguments","sendAsync","err","request","bind","format","Property","getter","setter","arg","proto","get","buildGet","enumerable","names","Object","defineProperty","asyncGetterName","buildAsyncGet","charAt","property","__WEBPACK_AMD_DEFINE_RESULT__","global","crypto","parseNumeric","isNumeric","mathceil","ceil","mathfloor","notBool","roundingMode","tooManyDigits","ALPHABET","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","another","configObj","div","id","P","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","ERRORS","isValidInt","intValidatorWithErrors","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","b","num","len","x","raise","s","RegExp","convertBase","search","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","p","r","a","o","has","hasOwnProperty","intValidatorNoErrors","max","maxOrMin","lt","min","gt","random","pow2_53","random53bitInt","dp","k","rand","getRandomValues","Uint32Array","randomBytes","copy","shift","baseOut","baseIn","d","xc","y","toBaseOut","toFixedPoint","coeffToString","unshift","multiply","base","m","temp","xlo","xhi","carry","klo","khi","compare","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","NaN","bitFloor","caller","c0","ne","toExponential","truncate","normalise","j","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","msg","error","sd","ni","rd","pows10","out","absoluteValue","abs","comparedTo","decimalPlaces","dividedToIntegerBy","divToInt","equals","eq","greaterThan","greaterThanOrEqualTo","gte","isInteger","isInt","isNegative","isNeg","isZero","lessThanOrEqualTo","lte","sub","t","xLTy","xe","ye","reverse","modulo","mod","negated","neg","add","precision","z","squareRoot","sqrt","rep","half","mul","xcL","ycL","ylo","yhi","zc","sqrtBase","toDigits","toFixed","toFormat","arr","g1","g2","intPart","fractionPart","intDigits","toFraction","md","d0","d2","exp","n0","n1","d1","toPower","parseFloat","toPrecision","truncated","trunc","valueOf","toJSON","arrL","CryptoJS","encoding","enc","Hex","outputLength","InvalidConnection","host","InvalidProvider","InvalidResponse","message","ConnectionTimeout","ms","SolidityTypeAddress","SolidityTypeBool","SolidityTypeInt","SolidityTypeUInt","SolidityTypeDynamicBytes","SolidityTypeString","SolidityTypeReal","SolidityTypeUReal","SolidityTypeBytes","isDynamic","solidityType","SolidityCoder","types","_types","_requireType","encodeParam","encodeParams","solidityTypes","getSolidityTypes","encodeds","acc","roundedStaticPartLength","encodeMultiWithOffset","encodeWithOffset","encoded","previousLength","additionalOffset","decodeParam","decodeParams","offsets","getOffsets","lengths","coder","ETH_UNITS","ETH_PADDING","ETH_SIGNATURE_LENGTH","ETH_POLLING_TIMEOUT","iso13616Prepare","A","Z","mod9710","remainder","_iban","fromAddress","asBn","base36","padded","fromBban","bban","countryCode","checkDigit","createIndirect","institution","identifier","isIndirect","checksum","client","formatters","toTopic","getOptions","fromBlock","toBlock","getLogsAtStart","messages","pollFilter","onMessage","callbacks","startPolling","implementation","poll","filterId","stopWatching","Filter","methods","filterCreationErrorCallback","getLogsCallbacks","pollFilters","newFilter","cb","watch","stopPolling","uninstallFilter","getLogs","res","eth","newFilterCall","shh","dynamicPartLength","withOffset","combine","offsetAsBytes","encodeList","totalOffset","offsetParams","Jsonrpc","messageId","console","jsonrpc","isValidResponse","response","every","validateSingleMessage","toBatchPayload","watches","SolidityEvent","_requestManager","_params","_name","_address","_anonymous","anonymous","indexed","displayName","signature","indexedTopics","concat","data","argTopics","indexedData","indexedParams","notIndexedData","notIndexedParams","event","execute","attachToContract","contract","Web3","state","savedABIs","methodIDs","_getABIs","_addABI","abiArray","abi","input","_removeABI","_getMethodIDs","_decodeMethod","methodID","abiItem","decoded","parsedParam","isUint","padZeros","formatted","_decodeLogs","logItem","logData","decodedParams","dataIndex","topicsIndex","dataTypes","decodedData","decodedP","events","getABIs","addABI","getMethodIDs","decodeMethod","decodeLogs","removeABI","window","RequestManager","Eth","DB","Shh","Net","Personal","Swarm","Settings","version","extend","Batch","HttpProvider","IpcProvider","provider","currentProvider","db","net","personal","bzz","settings","api","providers","_extend","properties","setProvider","reset","keepIsSyncing","isIBAN","fromICAP","icap","isConnected","createBatch","polls","timeout","sendBatch","results","pollId","uninstall","keys","clearTimeout","setTimeout","pollsData","pollsIds","pollsIdMap","load","valid","Contract","IsSyncing","namereg","transfer","blockCall","transactionFromBlockCall","uncleCall","getBlockTransactionCountCall","uncleCountCall","web3","sendIBANTransaction","set","getBalance","getStorageAt","getCode","getBlock","getUncle","getCompilers","getBlockTransactionCount","getBlockUncleCount","getTransaction","getTransactionFromBlock","getTransactionReceipt","getTransactionCount","sendRawTransaction","sendTransaction","signTransaction","estimateGas","compileSolidity","compileLLL","compileSerpent","submitWork","getWork","factory","fil","at","icapNamereg","isSyncing","SolidityFunction","AllEvents","encodeConstructorParams","addFunctionsToContract","_eth","addEventsToContract","All","checkForContractAddress","count","callbackFired","transactionHash","contractAddress","ContractFactory","new","last","constructorAbi","payable","hash","getData","_inputTypes","_outputTypes","outputs","_constant","constant","_payable","extractDefaultBlock","unpackOutput","output","unpacked","transaction","apply","AllSolidityEvents","_json","eventTopic","warn","allEvents","pollSyncing","sync","lastSyncState","addCallback","globalRegistrarAbi","icapRegistrarAbi","globalNameregAddress","icapNameregAddress","exchangeAbi","transferToAddress","addr","deposit","putString","getString","putHex","getHex","newIdentity","hasIdentity","newGroup","addToGroup","newAccount","unlockAccount","lockAccount","blockNetworkRead","syncEnabled","swapEnabled","download","upload","retrieve","store","put","modify","ex","extension","extendedObject","requests","XMLHttpRequest","XHR2","prepareRequest","async","open","setRequestHeader","responseText","onreadystatechange","readyState","ontimeout","path","_this","responseCallbacks","connection","connect","on","_timeout","_parseResponse","returnValues","dechunkedData","lastChunk","lastChunkTimeout","_addResponseCallback","writable","writeSync","write"],"mappings":"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","file":"static/js/14.513c3fa40d861bae364d.js","sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file utils.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\n/**\n * Utils\n *\n * @module utils\n */\n\n/**\n * Utility functions\n *\n * @class [utils] utils\n * @constructor\n */\n\n\nvar BigNumber = require('bignumber.js');\nvar sha3 = require('./sha3.js');\nvar utf8 = require('utf8');\n\nvar unitMap = {\n    'noether':      '0',    \n    'wei':          '1',\n    'kwei':         '1000',\n    'Kwei':         '1000',\n    'babbage':      '1000',\n    'femtoether':   '1000',\n    'mwei':         '1000000',\n    'Mwei':         '1000000',\n    'lovelace':     '1000000',\n    'picoether':    '1000000',\n    'gwei':         '1000000000',\n    'Gwei':         '1000000000',\n    'shannon':      '1000000000',\n    'nanoether':    '1000000000',\n    'nano':         '1000000000',\n    'szabo':        '1000000000000',\n    'microether':   '1000000000000',\n    'micro':        '1000000000000',\n    'finney':       '1000000000000000',\n    'milliether':    '1000000000000000',\n    'milli':         '1000000000000000',\n    'ether':        '1000000000000000000',\n    'kether':       '1000000000000000000000',\n    'grand':        '1000000000000000000000',\n    'mether':       '1000000000000000000000000',\n    'gether':       '1000000000000000000000000000',\n    'tether':       '1000000000000000000000000000000'\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method padLeft\n * @param {String} string to be padded\n * @param {Number} characters that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar padLeft = function (string, chars, sign) {\n    return new Array(chars - string.length + 1).join(sign ? sign : \"0\") + string;\n};\n\n/**\n * Should be called to pad string to expected length\n *\n * @method padRight\n * @param {String} string to be padded\n * @param {Number} characters that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar padRight = function (string, chars, sign) {\n    return string + (new Array(chars - string.length + 1).join(sign ? sign : \"0\"));\n};\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method toUtf8\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nvar toUtf8 = function(hex) {\n// Find termination\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        if (code === 0)\n            break;\n        str += String.fromCharCode(code);\n    }\n\n    return utf8.decode(str);\n};\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method toAscii\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nvar toAscii = function(hex) {\n// Find termination\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n\n    return str;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method fromUtf8\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nvar fromUtf8 = function(str) {\n    str = utf8.encode(str);\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        if (code === 0)\n            break;\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method fromAscii\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nvar fromAscii = function(str) {\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var code = str.charCodeAt(i);\n        var n = code.toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return \"0x\" + hex;\n};\n\n/**\n * Should be used to create full function/event name from json abi\n *\n * @method transformToFullName\n * @param {Object} json-abi\n * @return {String} full fnction/event name\n */\nvar transformToFullName = function (json) {\n    if (json.name.indexOf('(') !== -1) {\n        return json.name;\n    }\n\n    var typeName = json.inputs.map(function(i){return i.type; }).join();\n    return json.name + '(' + typeName + ')';\n};\n\n/**\n * Should be called to get display name of contract function\n *\n * @method extractDisplayName\n * @param {String} name of function/event\n * @returns {String} display name for function/event eg. multiply(uint256) -> multiply\n */\nvar extractDisplayName = function (name) {\n    var length = name.indexOf('(');\n    return length !== -1 ? name.substr(0, length) : name;\n};\n\n/// @returns overloaded part of function/event name\nvar extractTypeName = function (name) {\n    /// TODO: make it invulnerable\n    var length = name.indexOf('(');\n    return length !== -1 ? name.substr(length + 1, name.length - 1 - (length + 1)).replace(' ', '') : \"\";\n};\n\n/**\n * Converts value to it's decimal representation in string\n *\n * @method toDecimal\n * @param {String|Number|BigNumber}\n * @return {String}\n */\nvar toDecimal = function (value) {\n    return toBigNumber(value).toNumber();\n};\n\n/**\n * Converts value to it's hex representation\n *\n * @method fromDecimal\n * @param {String|Number|BigNumber}\n * @return {String}\n */\nvar fromDecimal = function (value) {\n    var number = toBigNumber(value);\n    var result = number.toString(16);\n\n    return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BigNumber|Object}\n * @return {String}\n */\nvar toHex = function (val) {\n    /*jshint maxcomplexity: 8 */\n\n    if (isBoolean(val))\n        return fromDecimal(+val);\n\n    if (isBigNumber(val))\n        return fromDecimal(val);\n\n    if (isObject(val))\n        return fromUtf8(JSON.stringify(val));\n\n    // if its a negative number, pass it through fromDecimal\n    if (isString(val)) {\n        if (val.indexOf('-0x') === 0)\n            return fromDecimal(val);\n        else if(val.indexOf('0x') === 0)\n            return val;\n        else if (!isFinite(val))\n            return fromAscii(val);\n    }\n\n    return fromDecimal(val);\n};\n\n/**\n * Returns value of unit in Wei\n *\n * @method getValueOfUnit\n * @param {String} unit the unit to convert to, default ether\n * @returns {BigNumber} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nvar getValueOfUnit = function (unit) {\n    unit = unit ? unit.toLowerCase() : 'ether';\n    var unitValue = unitMap[unit];\n    if (unitValue === undefined) {\n        throw new Error('This unit doesn\\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));\n    }\n    return new BigNumber(unitValue, 10);\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number\n*/\nvar fromWei = function(number, unit) {\n    var returnValue = toBigNumber(number).dividedBy(getValueOfUnit(unit));\n\n    return isBigNumber(number) ? returnValue : returnValue.toString(10);\n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n *   SI Short   SI Full        Effigy       Other\n * - kwei       femtoether     babbage\n * - mwei       picoether      lovelace\n * - gwei       nanoether      shannon      nano\n * - --         microether     szabo        micro\n * - --         microether     szabo        micro\n * - --         milliether     finney       milli\n * - ether      --             --\n * - kether                    --           grand\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BigNumber} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number\n*/\nvar toWei = function(number, unit) {\n    var returnValue = toBigNumber(number).times(getValueOfUnit(unit));\n\n    return isBigNumber(number) ? returnValue : returnValue.toString(10);\n};\n\n/**\n * Takes an input and transforms it into an bignumber\n *\n * @method toBigNumber\n * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber\n * @return {BigNumber} BigNumber\n*/\nvar toBigNumber = function(number) {\n    /*jshint maxcomplexity:5 */\n    number = number || 0;\n    if (isBigNumber(number))\n        return number;\n\n    if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {\n        return new BigNumber(number.replace('0x',''), 16);\n    }\n\n    return new BigNumber(number.toString(10), 10);\n};\n\n/**\n * Takes and input transforms it into bignumber and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BigNumber}\n * @return {BigNumber}\n */\nvar toTwosComplement = function (number) {\n    var bigNumber = toBigNumber(number).round();\n    if (bigNumber.lessThan(0)) {\n        return new BigNumber(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", 16).plus(bigNumber).plus(1);\n    }\n    return bigNumber;\n};\n\n/**\n * Checks if the given string is strictly an address\n *\n * @method isStrictAddress\n * @param {String} address the given HEX adress\n * @return {Boolean}\n*/\nvar isStrictAddress = function (address) {\n    return /^0x[0-9a-f]{40}$/i.test(address);\n};\n\n/**\n * Checks if the given string is an address\n *\n * @method isAddress\n * @param {String} address the given HEX adress\n * @return {Boolean}\n*/\nvar isAddress = function (address) {\n    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        // check if it has the basic requirements of an address\n        return false;\n    } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {\n        // If it's all small caps or all all caps, return true\n        return true;\n    } else {\n        // Otherwise check each case\n        return isChecksumAddress(address);\n    }\n};\n\n/**\n * Checks if the given string is a checksummed address\n *\n * @method isChecksumAddress\n * @param {String} address the given HEX adress\n * @return {Boolean}\n*/\nvar isChecksumAddress = function (address) {    \n    // Check each case\n    address = address.replace('0x','');\n    var addressHash = sha3(address.toLowerCase());\n\n    for (var i = 0; i < 40; i++ ) { \n        // the nth letter should be uppercase if the nth digit of casemap is 1\n        if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {\n            return false;\n        }\n    }\n    return true;    \n};\n\n\n\n/**\n * Makes a checksum address\n *\n * @method toChecksumAddress\n * @param {String} address the given HEX adress\n * @return {String}\n*/\nvar toChecksumAddress = function (address) { \n    if (typeof address === 'undefined') return '';\n\n    address = address.toLowerCase().replace('0x','');\n    var addressHash = sha3(address);\n    var checksumAddress = '0x';\n\n    for (var i = 0; i < address.length; i++ ) { \n        // If ith character is 9 to f then make it uppercase \n        if (parseInt(addressHash[i], 16) > 7) {\n          checksumAddress += address[i].toUpperCase();\n        } else {\n            checksumAddress += address[i];\n        }\n    }\n    return checksumAddress;\n};\n\n/**\n * Transforms given string to valid 20 bytes-length addres with 0x prefix\n *\n * @method toAddress\n * @param {String} address\n * @return {String} formatted address\n */\nvar toAddress = function (address) {\n    if (isStrictAddress(address)) {\n        return address;\n    }\n\n    if (/^[0-9a-f]{40}$/.test(address)) {\n        return '0x' + address;\n    }\n\n    return '0x' + padLeft(toHex(address).substr(2), 40);\n};\n\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object}\n * @return {Boolean}\n */\nvar isBigNumber = function (object) {\n    return object instanceof BigNumber ||\n        (object && object.constructor && object.constructor.name === 'BigNumber');\n};\n\n/**\n * Returns true if object is string, otherwise false\n *\n * @method isString\n * @param {Object}\n * @return {Boolean}\n */\nvar isString = function (object) {\n    return typeof object === 'string' ||\n        (object && object.constructor && object.constructor.name === 'String');\n};\n\n/**\n * Returns true if object is function, otherwise false\n *\n * @method isFunction\n * @param {Object}\n * @return {Boolean}\n */\nvar isFunction = function (object) {\n    return typeof object === 'function';\n};\n\n/**\n * Returns true if object is Objet, otherwise false\n *\n * @method isObject\n * @param {Object}\n * @return {Boolean}\n */\nvar isObject = function (object) {\n    return typeof object === 'object';\n};\n\n/**\n * Returns true if object is boolean, otherwise false\n *\n * @method isBoolean\n * @param {Object}\n * @return {Boolean}\n */\nvar isBoolean = function (object) {\n    return typeof object === 'boolean';\n};\n\n/**\n * Returns true if object is array, otherwise false\n *\n * @method isArray\n * @param {Object}\n * @return {Boolean}\n */\nvar isArray = function (object) {\n    return object instanceof Array;\n};\n\n/**\n * Returns true if given string is valid json object\n *\n * @method isJson\n * @param {String}\n * @return {Boolean}\n */\nvar isJson = function (str) {\n    try {\n        return !!JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n};\n\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\nvar isBloom = function (bloom) {\n    if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n        return true;\n    } \n    return false;\n};\n\n/**\n * Returns true if given string is a valid log topic.\n *\n * @method isTopic\n * @param {String} hex encoded topic\n * @return {Boolean}\n */\nvar isTopic = function (topic) {\n    if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {\n        return false;\n    } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {\n        return true;\n    } \n    return false;\n};\n\nmodule.exports = {\n    padLeft: padLeft,\n    padRight: padRight,\n    toHex: toHex,\n    toDecimal: toDecimal,\n    fromDecimal: fromDecimal,\n    toUtf8: toUtf8,\n    toAscii: toAscii,\n    fromUtf8: fromUtf8,\n    fromAscii: fromAscii,\n    transformToFullName: transformToFullName,\n    extractDisplayName: extractDisplayName,\n    extractTypeName: extractTypeName,\n    toWei: toWei,\n    fromWei: fromWei,\n    toBigNumber: toBigNumber,\n    toTwosComplement: toTwosComplement,\n    toAddress: toAddress,\n    isBigNumber: isBigNumber,\n    isStrictAddress: isStrictAddress,\n    isAddress: isAddress,\n    isChecksumAddress: isChecksumAddress,\n    toChecksumAddress: toChecksumAddress,\n    isFunction: isFunction,\n    isString: isString,\n    isObject: isObject,\n    isBoolean: isBoolean,\n    isArray: isArray,\n    isJson: isJson,\n    isBloom: isBloom,\n    isTopic: isTopic,\n};\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar BigNumber = require('bignumber.js');\nvar utils = require('../utils/utils');\nvar c = require('../utils/config');\nvar SolidityParam = require('./param');\n\n\n/**\n * Formats input value to byte representation of int\n * If value is negative, return it's two's complement\n * If the value is floating point, round it down\n *\n * @method formatInputInt\n * @param {String|Number|BigNumber} value that needs to be formatted\n * @returns {SolidityParam}\n */\nvar formatInputInt = function (value) {\n    BigNumber.config(c.ETH_BIGNUMBER_ROUNDING_MODE);\n    var result = utils.padLeft(utils.toTwosComplement(value).toString(16), 64);\n    return new SolidityParam(result);\n};\n\n/**\n * Formats input bytes\n *\n * @method formatInputBytes\n * @param {String}\n * @returns {SolidityParam}\n */\nvar formatInputBytes = function (value) {\n    var result = utils.toHex(value).substr(2);\n    var l = Math.floor((result.length + 63) / 64);\n    result = utils.padRight(result, l * 64);\n    return new SolidityParam(result);\n};\n\n/**\n * Formats input bytes\n *\n * @method formatDynamicInputBytes\n * @param {String}\n * @returns {SolidityParam}\n */\nvar formatInputDynamicBytes = function (value) {\n    var result = utils.toHex(value).substr(2);\n    var length = result.length / 2;\n    var l = Math.floor((result.length + 63) / 64);\n    result = utils.padRight(result, l * 64);\n    return new SolidityParam(formatInputInt(length).value + result);\n};\n\n/**\n * Formats input value to byte representation of string\n *\n * @method formatInputString\n * @param {String}\n * @returns {SolidityParam}\n */\nvar formatInputString = function (value) {\n    var result = utils.fromUtf8(value).substr(2);\n    var length = result.length / 2;\n    var l = Math.floor((result.length + 63) / 64);\n    result = utils.padRight(result, l * 64);\n    return new SolidityParam(formatInputInt(length).value + result);\n};\n\n/**\n * Formats input value to byte representation of bool\n *\n * @method formatInputBool\n * @param {Boolean}\n * @returns {SolidityParam}\n */\nvar formatInputBool = function (value) {\n    var result = '000000000000000000000000000000000000000000000000000000000000000' + (value ?  '1' : '0');\n    return new SolidityParam(result);\n};\n\n/**\n * Formats input value to byte representation of real\n * Values are multiplied by 2^m and encoded as integers\n *\n * @method formatInputReal\n * @param {String|Number|BigNumber}\n * @returns {SolidityParam}\n */\nvar formatInputReal = function (value) {\n    return formatInputInt(new BigNumber(value).times(new BigNumber(2).pow(128)));\n};\n\n/**\n * Check if input value is negative\n *\n * @method signedIsNegative\n * @param {String} value is hex format\n * @returns {Boolean} true if it is negative, otherwise false\n */\nvar signedIsNegative = function (value) {\n    return (new BigNumber(value.substr(0, 1), 16).toString(2).substr(0, 1)) === '1';\n};\n\n/**\n * Formats right-aligned output bytes to int\n *\n * @method formatOutputInt\n * @param {SolidityParam} param\n * @returns {BigNumber} right-aligned output bytes formatted to big number\n */\nvar formatOutputInt = function (param) {\n    var value = param.staticPart() || \"0\";\n\n    // check if it's negative number\n    // it it is, return two's complement\n    if (signedIsNegative(value)) {\n        return new BigNumber(value, 16).minus(new BigNumber('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)).minus(1);\n    }\n    return new BigNumber(value, 16);\n};\n\n/**\n * Formats right-aligned output bytes to uint\n *\n * @method formatOutputUInt\n * @param {SolidityParam}\n * @returns {BigNumeber} right-aligned output bytes formatted to uint\n */\nvar formatOutputUInt = function (param) {\n    var value = param.staticPart() || \"0\";\n    return new BigNumber(value, 16);\n};\n\n/**\n * Formats right-aligned output bytes to real\n *\n * @method formatOutputReal\n * @param {SolidityParam}\n * @returns {BigNumber} input bytes formatted to real\n */\nvar formatOutputReal = function (param) {\n    return formatOutputInt(param).dividedBy(new BigNumber(2).pow(128));\n};\n\n/**\n * Formats right-aligned output bytes to ureal\n *\n * @method formatOutputUReal\n * @param {SolidityParam}\n * @returns {BigNumber} input bytes formatted to ureal\n */\nvar formatOutputUReal = function (param) {\n    return formatOutputUInt(param).dividedBy(new BigNumber(2).pow(128));\n};\n\n/**\n * Should be used to format output bool\n *\n * @method formatOutputBool\n * @param {SolidityParam}\n * @returns {Boolean} right-aligned input bytes formatted to bool\n */\nvar formatOutputBool = function (param) {\n    return param.staticPart() === '0000000000000000000000000000000000000000000000000000000000000001' ? true : false;\n};\n\n/**\n * Should be used to format output bytes\n *\n * @method formatOutputBytes\n * @param {SolidityParam} left-aligned hex representation of string\n * @param {String} name type name\n * @returns {String} hex string\n */\nvar formatOutputBytes = function (param, name) {\n    var matches = name.match(/^bytes([0-9]*)/);\n    var size = parseInt(matches[1]);\n    return '0x' + param.staticPart().slice(0, 2 * size);\n};\n\n/**\n * Should be used to format output bytes\n *\n * @method formatOutputDynamicBytes\n * @param {SolidityParam} left-aligned hex representation of string\n * @returns {String} hex string\n */\nvar formatOutputDynamicBytes = function (param) {\n    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;\n    return '0x' + param.dynamicPart().substr(64, length);\n};\n\n/**\n * Should be used to format output string\n *\n * @method formatOutputString\n * @param {SolidityParam} left-aligned hex representation of string\n * @returns {String} ascii string\n */\nvar formatOutputString = function (param) {\n    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;\n    return utils.toUtf8(param.dynamicPart().substr(64, length));\n};\n\n/**\n * Should be used to format output address\n *\n * @method formatOutputAddress\n * @param {SolidityParam} right-aligned input bytes\n * @returns {String} address\n */\nvar formatOutputAddress = function (param) {\n    var value = param.staticPart();\n    return \"0x\" + value.slice(value.length - 40, value.length);\n};\n\nmodule.exports = {\n    formatInputInt: formatInputInt,\n    formatInputBytes: formatInputBytes,\n    formatInputDynamicBytes: formatInputDynamicBytes,\n    formatInputString: formatInputString,\n    formatInputBool: formatInputBool,\n    formatInputReal: formatInputReal,\n    formatOutputInt: formatOutputInt,\n    formatOutputUInt: formatOutputUInt,\n    formatOutputReal: formatOutputReal,\n    formatOutputUReal: formatOutputUReal,\n    formatOutputBool: formatOutputBool,\n    formatOutputBytes: formatOutputBytes,\n    formatOutputDynamicBytes: formatOutputDynamicBytes,\n    formatOutputString: formatOutputString,\n    formatOutputAddress: formatOutputAddress\n};\n","var f = require('./formatters');\nvar SolidityParam = require('./param');\n\n/**\n * SolidityType prototype is used to encode/decode solidity params of certain type\n */\nvar SolidityType = function (config) {\n    this._inputFormatter = config.inputFormatter;\n    this._outputFormatter = config.outputFormatter;\n};\n\n/**\n * Should be used to determine if this SolidityType do match given name\n *\n * @method isType\n * @param {String} name\n * @return {Bool} true if type match this SolidityType, otherwise false\n */\nSolidityType.prototype.isType = function (name) {\n    throw \"this method should be overrwritten for type \" + name;\n};\n\n/**\n * Should be used to determine what is the length of static part in given type\n *\n * @method staticPartLength\n * @param {String} name\n * @return {Number} length of static part in bytes\n */\nSolidityType.prototype.staticPartLength = function (name) {\n    // If name isn't an array then treat it like a single element array.\n    return (this.nestedTypes(name) || ['[1]'])\n        .map(function (type) {\n            // the length of the nested array\n            return parseInt(type.slice(1, -1), 10) || 1;\n        })\n        .reduce(function (previous, current) {\n            return previous * current;\n        // all basic types are 32 bytes long\n        }, 32);\n};\n\n/**\n * Should be used to determine if type is dynamic array\n * eg:\n * \"type[]\" => true\n * \"type[4]\" => false\n *\n * @method isDynamicArray\n * @param {String} name\n * @return {Bool} true if the type is dynamic array\n */\nSolidityType.prototype.isDynamicArray = function (name) {\n    var nestedTypes = this.nestedTypes(name);\n    return !!nestedTypes && !nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);\n};\n\n/**\n * Should be used to determine if type is static array\n * eg:\n * \"type[]\" => false\n * \"type[4]\" => true\n *\n * @method isStaticArray\n * @param {String} name\n * @return {Bool} true if the type is static array\n */\nSolidityType.prototype.isStaticArray = function (name) {\n    var nestedTypes = this.nestedTypes(name);\n    return !!nestedTypes && !!nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);\n};\n\n/**\n * Should return length of static array\n * eg.\n * \"int[32]\" => 32\n * \"int256[14]\" => 14\n * \"int[2][3]\" => 3\n * \"int\" => 1\n * \"int[1]\" => 1\n * \"int[]\" => 1\n *\n * @method staticArrayLength\n * @param {String} name\n * @return {Number} static array length\n */\nSolidityType.prototype.staticArrayLength = function (name) {\n    var nestedTypes = this.nestedTypes(name);\n    if (nestedTypes) {\n       return parseInt(nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g) || 1);\n    }\n    return 1;\n};\n\n/**\n * Should return nested type\n * eg.\n * \"int[32]\" => \"int\"\n * \"int256[14]\" => \"int256\"\n * \"int[2][3]\" => \"int[2]\"\n * \"int\" => \"int\"\n * \"int[]\" => \"int\"\n *\n * @method nestedName\n * @param {String} name\n * @return {String} nested name\n */\nSolidityType.prototype.nestedName = function (name) {\n    // remove last [] in name\n    var nestedTypes = this.nestedTypes(name);\n    if (!nestedTypes) {\n        return name;\n    }\n\n    return name.substr(0, name.length - nestedTypes[nestedTypes.length - 1].length);\n};\n\n/**\n * Should return true if type has dynamic size by default\n * such types are \"string\", \"bytes\"\n *\n * @method isDynamicType\n * @param {String} name\n * @return {Bool} true if is dynamic, otherwise false\n */\nSolidityType.prototype.isDynamicType = function () {\n    return false;\n};\n\n/**\n * Should return array of nested types\n * eg.\n * \"int[2][3][]\" => [\"[2]\", \"[3]\", \"[]\"]\n * \"int[] => [\"[]\"]\n * \"int\" => null\n *\n * @method nestedTypes\n * @param {String} name\n * @return {Array} array of nested types\n */\nSolidityType.prototype.nestedTypes = function (name) {\n    // return list of strings eg. \"[]\", \"[3]\", \"[]\", \"[2]\"\n    return name.match(/(\\[[0-9]*\\])/g);\n};\n\n/**\n * Should be used to encode the value\n *\n * @method encode\n * @param {Object} value\n * @param {String} name\n * @return {String} encoded value\n */\nSolidityType.prototype.encode = function (value, name) {\n    var self = this;\n    if (this.isDynamicArray(name)) {\n\n        return (function () {\n            var length = value.length;                          // in int\n            var nestedName = self.nestedName(name);\n\n            var result = [];\n            result.push(f.formatInputInt(length).encode());\n\n            value.forEach(function (v) {\n                result.push(self.encode(v, nestedName));\n            });\n\n            return result;\n        })();\n\n    } else if (this.isStaticArray(name)) {\n\n        return (function () {\n            var length = self.staticArrayLength(name);          // in int\n            var nestedName = self.nestedName(name);\n\n            var result = [];\n            for (var i = 0; i < length; i++) {\n                result.push(self.encode(value[i], nestedName));\n            }\n\n            return result;\n        })();\n\n    }\n\n    return this._inputFormatter(value, name).encode();\n};\n\n/**\n * Should be used to decode value from bytes\n *\n * @method decode\n * @param {String} bytes\n * @param {Number} offset in bytes\n * @param {String} name type name\n * @returns {Object} decoded value\n */\nSolidityType.prototype.decode = function (bytes, offset, name) {\n    var self = this;\n\n    if (this.isDynamicArray(name)) {\n\n        return (function () {\n            var arrayOffset = parseInt('0x' + bytes.substr(offset * 2, 64)); // in bytes\n            var length = parseInt('0x' + bytes.substr(arrayOffset * 2, 64)); // in int\n            var arrayStart = arrayOffset + 32; // array starts after length; // in bytes\n\n            var nestedName = self.nestedName(name);\n            var nestedStaticPartLength = self.staticPartLength(nestedName);  // in bytes\n            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;\n            var result = [];\n\n            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {\n                result.push(self.decode(bytes, arrayStart + i, nestedName));\n            }\n\n            return result;\n        })();\n\n    } else if (this.isStaticArray(name)) {\n\n        return (function () {\n            var length = self.staticArrayLength(name);                      // in int\n            var arrayStart = offset;                                        // in bytes\n\n            var nestedName = self.nestedName(name);\n            var nestedStaticPartLength = self.staticPartLength(nestedName); // in bytes\n            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;\n            var result = [];\n\n            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {\n                result.push(self.decode(bytes, arrayStart + i, nestedName));\n            }\n\n            return result;\n        })();\n    } else if (this.isDynamicType(name)) {\n\n        return (function () {\n            var dynamicOffset = parseInt('0x' + bytes.substr(offset * 2, 64));      // in bytes\n            var length = parseInt('0x' + bytes.substr(dynamicOffset * 2, 64));      // in bytes\n            var roundedLength = Math.floor((length + 31) / 32);                     // in int\n            var param = new SolidityParam(bytes.substr(dynamicOffset * 2, ( 1 + roundedLength) * 64), 0);\n            return self._outputFormatter(param, name);\n        })();\n    }\n\n    var length = this.staticPartLength(name);\n    var param = new SolidityParam(bytes.substr(offset * 2, length * 2));\n    return this._outputFormatter(param, name);\n};\n\nmodule.exports = SolidityType;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file formatters.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @author Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n\nvar utils = require('../utils/utils');\nvar config = require('../utils/config');\nvar Iban = require('./iban');\n\n/**\n * Should the format output to a big number\n *\n * @method outputBigNumberFormatter\n * @param {String|Number|BigNumber}\n * @returns {BigNumber} object\n */\nvar outputBigNumberFormatter = function (number) {\n    return utils.toBigNumber(number);\n};\n\nvar isPredefinedBlockNumber = function (blockNumber) {\n    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';\n};\n\nvar inputDefaultBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return config.defaultBlock;\n    }\n    return inputBlockNumberFormatter(blockNumber);\n};\n\nvar inputBlockNumberFormatter = function (blockNumber) {\n    if (blockNumber === undefined) {\n        return undefined;\n    } else if (isPredefinedBlockNumber(blockNumber)) {\n        return blockNumber;\n    }\n    return utils.toHex(blockNumber);\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputCallFormatter = function (options){\n\n    options.from = options.from || config.defaultAccount;\n\n    if (options.from) {\n        options.from = inputAddressFormatter(options.from);\n    }\n\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function(key){\n        options[key] = utils.fromDecimal(options[key]);\n    });\n\n    return options;\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputTransactionFormatter = function (options){\n\n    options.from = options.from || config.defaultAccount;\n    options.from = inputAddressFormatter(options.from);\n\n    if (options.to) { // it might be contract creation\n        options.to = inputAddressFormatter(options.to);\n    }\n\n    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {\n        return options[key] !== undefined;\n    }).forEach(function(key){\n        options[key] = utils.fromDecimal(options[key]);\n    });\n\n    return options;\n};\n\n/**\n * Formats the output of a transaction to its proper values\n *\n * @method outputTransactionFormatter\n * @param {Object} tx\n * @returns {Object}\n*/\nvar outputTransactionFormatter = function (tx){\n    if(tx.blockNumber !== null)\n        tx.blockNumber = utils.toDecimal(tx.blockNumber);\n    if(tx.transactionIndex !== null)\n        tx.transactionIndex = utils.toDecimal(tx.transactionIndex);\n    tx.nonce = utils.toDecimal(tx.nonce);\n    tx.gas = utils.toDecimal(tx.gas);\n    tx.gasPrice = utils.toBigNumber(tx.gasPrice);\n    tx.value = utils.toBigNumber(tx.value);\n    return tx;\n};\n\n/**\n * Formats the output of a transaction receipt to its proper values\n *\n * @method outputTransactionReceiptFormatter\n * @param {Object} receipt\n * @returns {Object}\n*/\nvar outputTransactionReceiptFormatter = function (receipt){\n    if(receipt.blockNumber !== null)\n        receipt.blockNumber = utils.toDecimal(receipt.blockNumber);\n    if(receipt.transactionIndex !== null)\n        receipt.transactionIndex = utils.toDecimal(receipt.transactionIndex);\n    receipt.cumulativeGasUsed = utils.toDecimal(receipt.cumulativeGasUsed);\n    receipt.gasUsed = utils.toDecimal(receipt.gasUsed);\n\n    if(utils.isArray(receipt.logs)) {\n        receipt.logs = receipt.logs.map(function(log){\n            return outputLogFormatter(log);\n        });\n    }\n\n    return receipt;\n};\n\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block\n * @returns {Object}\n*/\nvar outputBlockFormatter = function(block) {\n\n    // transform to number\n    block.gasLimit = utils.toDecimal(block.gasLimit);\n    block.gasUsed = utils.toDecimal(block.gasUsed);\n    block.size = utils.toDecimal(block.size);\n    block.timestamp = utils.toDecimal(block.timestamp);\n    if(block.number !== null)\n        block.number = utils.toDecimal(block.number);\n\n    block.difficulty = utils.toBigNumber(block.difficulty);\n    block.totalDifficulty = utils.toBigNumber(block.totalDifficulty);\n\n    if (utils.isArray(block.transactions)) {\n        block.transactions.forEach(function(item){\n            if(!utils.isString(item))\n                return outputTransactionFormatter(item);\n        });\n    }\n\n    return block;\n};\n\n/**\n * Formats the output of a log\n *\n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar outputLogFormatter = function(log) {\n    if(log.blockNumber !== null)\n        log.blockNumber = utils.toDecimal(log.blockNumber);\n    if(log.transactionIndex !== null)\n        log.transactionIndex = utils.toDecimal(log.transactionIndex);\n    if(log.logIndex !== null)\n        log.logIndex = utils.toDecimal(log.logIndex);\n\n    return log;\n};\n\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n*/\nvar inputPostFormatter = function(post) {\n\n    // post.payload = utils.toHex(post.payload);\n    post.ttl = utils.fromDecimal(post.ttl);\n    post.workToProve = utils.fromDecimal(post.workToProve);\n    post.priority = utils.fromDecimal(post.priority);\n\n    // fallback\n    if (!utils.isArray(post.topics)) {\n        post.topics = post.topics ? [post.topics] : [];\n    }\n\n    // format the following options\n    post.topics = post.topics.map(function(topic){\n        // convert only if not hex\n        return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);\n    });\n\n    return post;\n};\n\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nvar outputPostFormatter = function(post){\n\n    post.expiry = utils.toDecimal(post.expiry);\n    post.sent = utils.toDecimal(post.sent);\n    post.ttl = utils.toDecimal(post.ttl);\n    post.workProved = utils.toDecimal(post.workProved);\n    // post.payloadRaw = post.payload;\n    // post.payload = utils.toAscii(post.payload);\n\n    // if (utils.isJson(post.payload)) {\n    //     post.payload = JSON.parse(post.payload);\n    // }\n\n    // format the following options\n    if (!post.topics) {\n        post.topics = [];\n    }\n    post.topics = post.topics.map(function(topic){\n        return utils.toAscii(topic);\n    });\n\n    return post;\n};\n\nvar inputAddressFormatter = function (address) {\n    var iban = new Iban(address);\n    if (iban.isValid() && iban.isDirect()) {\n        return '0x' + iban.address();\n    } else if (utils.isStrictAddress(address)) {\n        return address;\n    } else if (utils.isAddress(address)) {\n        return '0x' + address;\n    }\n    throw new Error('invalid address');\n};\n\n\nvar outputSyncingFormatter = function(result) {\n\n    result.startingBlock = utils.toDecimal(result.startingBlock);\n    result.currentBlock = utils.toDecimal(result.currentBlock);\n    result.highestBlock = utils.toDecimal(result.highestBlock);\n    if (result.knownStates) {\n        result.knownStates = utils.toDecimal(result.knownStates);\n        result.pulledStates = utils.toDecimal(result.pulledStates);\n    }\n\n    return result;\n};\n\nmodule.exports = {\n    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,\n    inputBlockNumberFormatter: inputBlockNumberFormatter,\n    inputCallFormatter: inputCallFormatter,\n    inputTransactionFormatter: inputTransactionFormatter,\n    inputAddressFormatter: inputAddressFormatter,\n    inputPostFormatter: inputPostFormatter,\n    outputBigNumberFormatter: outputBigNumberFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    outputPostFormatter: outputPostFormatter,\n    outputSyncingFormatter: outputSyncingFormatter\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file method.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar utils = require('../utils/utils');\nvar errors = require('./errors');\n\nvar Method = function (options) {\n    this.name = options.name;\n    this.call = options.call;\n    this.params = options.params || 0;\n    this.inputFormatter = options.inputFormatter;\n    this.outputFormatter = options.outputFormatter;\n    this.requestManager = null;\n};\n\nMethod.prototype.setRequestManager = function (rm) {\n    this.requestManager = rm;\n};\n\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\nMethod.prototype.getCall = function (args) {\n    return utils.isFunction(this.call) ? this.call(args) : this.call;\n};\n\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\nMethod.prototype.extractCallback = function (args) {\n    if (utils.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n\n/**\n * Should be called to check if the number of arguments is correct\n * \n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\nMethod.prototype.validateArgs = function (args) {\n    if (args.length !== this.params) {\n        throw errors.InvalidNumberOfParams();\n    }\n};\n\n/**\n * Should be called to format input args of method\n * \n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\nMethod.prototype.formatInput = function (args) {\n    if (!this.inputFormatter) {\n        return args;\n    }\n\n    return this.inputFormatter.map(function (formatter, index) {\n        return formatter ? formatter(args[index]) : args[index];\n    });\n};\n\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\nMethod.prototype.formatOutput = function (result) {\n    return this.outputFormatter && result ? this.outputFormatter(result) : result;\n};\n\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nMethod.prototype.toPayload = function (args) {\n    var call = this.getCall(args);\n    var callback = this.extractCallback(args);\n    var params = this.formatInput(args);\n    this.validateArgs(params);\n\n    return {\n        method: call,\n        params: params,\n        callback: callback\n    };\n};\n\nMethod.prototype.attachToObject = function (obj) {\n    var func = this.buildCall();\n    func.call = this.call; // TODO!!! that's ugly. filter.js uses it\n    var name = this.name.split('.');\n    if (name.length > 1) {\n        obj[name[0]] = obj[name[0]] || {};\n        obj[name[0]][name[1]] = func;\n    } else {\n        obj[name[0]] = func; \n    }\n};\n\nMethod.prototype.buildCall = function() {\n    var method = this;\n    var send = function () {\n        var payload = method.toPayload(Array.prototype.slice.call(arguments));\n        if (payload.callback) {\n            return method.requestManager.sendAsync(payload, function (err, result) {\n                payload.callback(err, method.formatOutput(result));\n            });\n        }\n        return method.formatOutput(method.requestManager.send(payload));\n    };\n    send.request = this.request.bind(this);\n    return send;\n};\n\n/**\n * Should be called to create pure JSONRPC request which can be used in batch request\n *\n * @method request\n * @param {...} params\n * @return {Object} jsonrpc request\n */\nMethod.prototype.request = function () {\n    var payload = this.toPayload(Array.prototype.slice.call(arguments));\n    payload.format = this.formatOutput.bind(this);\n    return payload;\n};\n\nmodule.exports = Method;\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file property.js\n * @author Fabian Vogelsteller <fabian@frozeman.de>\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar utils = require('../utils/utils');\n\nvar Property = function (options) {\n    this.name = options.name;\n    this.getter = options.getter;\n    this.setter = options.setter;\n    this.outputFormatter = options.outputFormatter;\n    this.inputFormatter = options.inputFormatter;\n    this.requestManager = null;\n};\n\nProperty.prototype.setRequestManager = function (rm) {\n    this.requestManager = rm;\n};\n\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\nProperty.prototype.formatInput = function (arg) {\n    return this.inputFormatter ? this.inputFormatter(arg) : arg;\n};\n\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\nProperty.prototype.formatOutput = function (result) {\n    return this.outputFormatter && result !== null && result !== undefined ? this.outputFormatter(result) : result;\n};\n\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\nProperty.prototype.extractCallback = function (args) {\n    if (utils.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n\n\n/**\n * Should attach function to method\n *\n * @method attachToObject\n * @param {Object}\n * @param {Function}\n */\nProperty.prototype.attachToObject = function (obj) {\n    var proto = {\n        get: this.buildGet(),\n        enumerable: true\n    };\n\n    var names = this.name.split('.');\n    var name = names[0];\n    if (names.length > 1) {\n        obj[names[0]] = obj[names[0]] || {};\n        obj = obj[names[0]];\n        name = names[1];\n    }\n\n    Object.defineProperty(obj, name, proto);\n    obj[asyncGetterName(name)] = this.buildAsyncGet();\n};\n\nvar asyncGetterName = function (name) {\n    return 'get' + name.charAt(0).toUpperCase() + name.slice(1);\n};\n\nProperty.prototype.buildGet = function () {\n    var property = this;\n    return function get() {\n        return property.formatOutput(property.requestManager.send({\n            method: property.getter\n        }));\n    };\n};\n\nProperty.prototype.buildAsyncGet = function () {\n    var property = this;\n    var get = function (callback) {\n        property.requestManager.sendAsync({\n            method: property.getter\n        }, function (err, result) {\n            callback(err, property.formatOutput(result));\n        });\n    };\n    get.request = this.request.bind(this);\n    return get;\n};\n\n/**\n * Should be called to create pure JSONRPC request which can be used in batch request\n *\n * @method request\n * @param {...} params\n * @return {Object} jsonrpc request\n */\nProperty.prototype.request = function () {\n    var payload = {\n        method: this.getter,\n        params: [],\n        callback: this.extractCallback(Array.prototype.slice.call(arguments))\n    };\n    payload.format = this.formatOutput.bind(this);\n    return payload;\n};\n\nmodule.exports = Property;\n\n","/*! bignumber.js v2.0.7 https://github.com/MikeMcl/bignumber.js/LICENCE */\r\n\r\n;(function (global) {\r\n    'use strict';\r\n\r\n    /*\r\n      bignumber.js v2.0.7\r\n      A JavaScript library for arbitrary-precision arithmetic.\r\n      https://github.com/MikeMcl/bignumber.js\r\n      Copyright (c) 2015 Michael Mclaughlin <M8ch88l@gmail.com>\r\n      MIT Expat Licence\r\n    */\r\n\r\n\r\n    var BigNumber, crypto, parseNumeric,\r\n        isNumeric = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n        mathceil = Math.ceil,\r\n        mathfloor = Math.floor,\r\n        notBool = ' not a boolean or binary digit',\r\n        roundingMode = 'rounding mode',\r\n        tooManyDigits = 'number type has more than 15 significant digits',\r\n        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',\r\n        BASE = 1e14,\r\n        LOG_BASE = 14,\r\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n        SQRT_BASE = 1e7,\r\n\r\n        /*\r\n         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an\r\n         * exception is thrown (if ERRORS is true).\r\n         */\r\n        MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n    /*\r\n     * Create and return a BigNumber constructor.\r\n     */\r\n    function another(configObj) {\r\n        var div,\r\n\r\n            // id tracks the caller function, so its name can be included in error messages.\r\n            id = 0,\r\n            P = BigNumber.prototype,\r\n            ONE = new BigNumber(1),\r\n\r\n\r\n            /********************************* EDITABLE DEFAULTS **********************************/\r\n\r\n\r\n            /*\r\n             * The default values below must be integers within the inclusive ranges stated.\r\n             * The values can also be changed at run-time using BigNumber.config.\r\n             */\r\n\r\n            // The maximum number of decimal places for operations involving division.\r\n            DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n            /*\r\n             * The rounding mode used when rounding to the above decimal places, and when using\r\n             * toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n             * UP         0 Away from zero.\r\n             * DOWN       1 Towards zero.\r\n             * CEIL       2 Towards +Infinity.\r\n             * FLOOR      3 Towards -Infinity.\r\n             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n             */\r\n            ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n            // The exponent value at and beneath which toString returns exponential notation.\r\n            // Number type: -7\r\n            TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n            // The exponent value at and above which toString returns exponential notation.\r\n            // Number type: 21\r\n            TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n            // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n            // The minimum exponent value, beneath which underflow to zero occurs.\r\n            // Number type: -324  (5e-324)\r\n            MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n            // The maximum exponent value, above which overflow to Infinity occurs.\r\n            // Number type:  308  (1.7976931348623157e+308)\r\n            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n            MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n            // Whether BigNumber Errors are ever thrown.\r\n            ERRORS = true,                           // true or false\r\n\r\n            // Change to intValidatorNoErrors if ERRORS is false.\r\n            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors\r\n\r\n            // Whether to use cryptographically-secure random number generation, if available.\r\n            CRYPTO = false,                          // true or false\r\n\r\n            /*\r\n             * The modulo mode used when calculating the modulus: a mod n.\r\n             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n             * The remainder (r) is calculated as: r = a - n * q.\r\n             *\r\n             * UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n             * DOWN      1 The remainder has the same sign as the dividend.\r\n             *             This modulo mode is commonly known as 'truncated division' and is\r\n             *             equivalent to (a % n) in JavaScript.\r\n             * FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n             *             The remainder is always positive.\r\n             *\r\n             * The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n             * modes are commonly used for the modulus operation.\r\n             * Although the other rounding modes can also be used, they may not give useful results.\r\n             */\r\n            MODULO_MODE = 1,                         // 0 to 9\r\n\r\n            // The maximum number of significant digits of the result of the toPower operation.\r\n            // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n            POW_PRECISION = 100,                     // 0 to MAX\r\n\r\n            // The format specification used by the BigNumber.prototype.toFormat method.\r\n            FORMAT = {\r\n                decimalSeparator: '.',\r\n                groupSeparator: ',',\r\n                groupSize: 3,\r\n                secondaryGroupSize: 0,\r\n                fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n                fractionGroupSize: 0\r\n            };\r\n\r\n\r\n        /******************************************************************************************/\r\n\r\n\r\n        // CONSTRUCTOR\r\n\r\n\r\n        /*\r\n         * The BigNumber constructor and exported function.\r\n         * Create and return a new instance of a BigNumber object.\r\n         *\r\n         * n {number|string|BigNumber} A numeric value.\r\n         * [b] {number} The base of n. Integer, 2 to 64 inclusive.\r\n         */\r\n        function BigNumber( n, b ) {\r\n            var c, e, i, num, len, str,\r\n                x = this;\r\n\r\n            // Enable constructor usage without new.\r\n            if ( !( x instanceof BigNumber ) ) {\r\n\r\n                // 'BigNumber() constructor call without new: {n}'\r\n                if (ERRORS) raise( 26, 'constructor call without new', n );\r\n                return new BigNumber( n, b );\r\n            }\r\n\r\n            // 'new BigNumber() base not an integer: {b}'\r\n            // 'new BigNumber() base out of range: {b}'\r\n            if ( b == null || !isValidInt( b, 2, 64, id, 'base' ) ) {\r\n\r\n                // Duplicate.\r\n                if ( n instanceof BigNumber ) {\r\n                    x.s = n.s;\r\n                    x.e = n.e;\r\n                    x.c = ( n = n.c ) ? n.slice() : n;\r\n                    id = 0;\r\n                    return;\r\n                }\r\n\r\n                if ( ( num = typeof n == 'number' ) && n * 0 == 0 ) {\r\n                    x.s = 1 / n < 0 ? ( n = -n, -1 ) : 1;\r\n\r\n                    // Fast path for integers.\r\n                    if ( n === ~~n ) {\r\n                        for ( e = 0, i = n; i >= 10; i /= 10, e++ );\r\n                        x.e = e;\r\n                        x.c = [n];\r\n                        id = 0;\r\n                        return;\r\n                    }\r\n\r\n                    str = n + '';\r\n                } else {\r\n                    if ( !isNumeric.test( str = n + '' ) ) return parseNumeric( x, str, num );\r\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\r\n                }\r\n            } else {\r\n                b = b | 0;\r\n                str = n + '';\r\n\r\n                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.\r\n                // Allow exponential notation to be used with base 10 argument.\r\n                if ( b == 10 ) {\r\n                    x = new BigNumber( n instanceof BigNumber ? n : str );\r\n                    return round( x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE );\r\n                }\r\n\r\n                // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n                // Any number in exponential form will fail due to the [Ee][+-].\r\n                if ( ( num = typeof n == 'number' ) && n * 0 != 0 ||\r\n                  !( new RegExp( '^-?' + ( c = '[' + ALPHABET.slice( 0, b ) + ']+' ) +\r\n                    '(?:\\\\.' + c + ')?$',b < 37 ? 'i' : '' ) ).test(str) ) {\r\n                    return parseNumeric( x, str, num, b );\r\n                }\r\n\r\n                if (num) {\r\n                    x.s = 1 / n < 0 ? ( str = str.slice(1), -1 ) : 1;\r\n\r\n                    if ( ERRORS && str.replace( /^0\\.0*|\\./, '' ).length > 15 ) {\r\n\r\n                        // 'new BigNumber() number type has more than 15 significant digits: {n}'\r\n                        raise( id, tooManyDigits, n );\r\n                    }\r\n\r\n                    // Prevent later check for length on converted number.\r\n                    num = false;\r\n                } else {\r\n                    x.s = str.charCodeAt(0) === 45 ? ( str = str.slice(1), -1 ) : 1;\r\n                }\r\n\r\n                str = convertBase( str, 10, b, x.s );\r\n            }\r\n\r\n            // Decimal point?\r\n            if ( ( e = str.indexOf('.') ) > -1 ) str = str.replace( '.', '' );\r\n\r\n            // Exponential form?\r\n            if ( ( i = str.search( /e/i ) ) > 0 ) {\r\n\r\n                // Determine exponent.\r\n                if ( e < 0 ) e = i;\r\n                e += +str.slice( i + 1 );\r\n                str = str.substring( 0, i );\r\n            } else if ( e < 0 ) {\r\n\r\n                // Integer.\r\n                e = str.length;\r\n            }\r\n\r\n            // Determine leading zeros.\r\n            for ( i = 0; str.charCodeAt(i) === 48; i++ );\r\n\r\n            // Determine trailing zeros.\r\n            for ( len = str.length; str.charCodeAt(--len) === 48; );\r\n            str = str.slice( i, len + 1 );\r\n\r\n            if (str) {\r\n                len = str.length;\r\n\r\n                // Disallow numbers with over 15 significant digits if number type.\r\n                // 'new BigNumber() number type has more than 15 significant digits: {n}'\r\n                if ( num && ERRORS && len > 15 ) raise( id, tooManyDigits, x.s * n );\r\n\r\n                e = e - i - 1;\r\n\r\n                 // Overflow?\r\n                if ( e > MAX_EXP ) {\r\n\r\n                    // Infinity.\r\n                    x.c = x.e = null;\r\n\r\n                // Underflow?\r\n                } else if ( e < MIN_EXP ) {\r\n\r\n                    // Zero.\r\n                    x.c = [ x.e = 0 ];\r\n                } else {\r\n                    x.e = e;\r\n                    x.c = [];\r\n\r\n                    // Transform base\r\n\r\n                    // e is the base 10 exponent.\r\n                    // i is where to slice str to get the first element of the coefficient array.\r\n                    i = ( e + 1 ) % LOG_BASE;\r\n                    if ( e < 0 ) i += LOG_BASE;\r\n\r\n                    if ( i < len ) {\r\n                        if (i) x.c.push( +str.slice( 0, i ) );\r\n\r\n                        for ( len -= LOG_BASE; i < len; ) {\r\n                            x.c.push( +str.slice( i, i += LOG_BASE ) );\r\n                        }\r\n\r\n                        str = str.slice(i);\r\n                        i = LOG_BASE - str.length;\r\n                    } else {\r\n                        i -= len;\r\n                    }\r\n\r\n                    for ( ; i--; str += '0' );\r\n                    x.c.push( +str );\r\n                }\r\n            } else {\r\n\r\n                // Zero.\r\n                x.c = [ x.e = 0 ];\r\n            }\r\n\r\n            id = 0;\r\n        }\r\n\r\n\r\n        // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n        BigNumber.another = another;\r\n\r\n        BigNumber.ROUND_UP = 0;\r\n        BigNumber.ROUND_DOWN = 1;\r\n        BigNumber.ROUND_CEIL = 2;\r\n        BigNumber.ROUND_FLOOR = 3;\r\n        BigNumber.ROUND_HALF_UP = 4;\r\n        BigNumber.ROUND_HALF_DOWN = 5;\r\n        BigNumber.ROUND_HALF_EVEN = 6;\r\n        BigNumber.ROUND_HALF_CEIL = 7;\r\n        BigNumber.ROUND_HALF_FLOOR = 8;\r\n        BigNumber.EUCLID = 9;\r\n\r\n\r\n        /*\r\n         * Configure infrequently-changing library-wide settings.\r\n         *\r\n         * Accept an object or an argument list, with one or many of the following properties or\r\n         * parameters respectively:\r\n         *\r\n         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive\r\n         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive\r\n         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or\r\n         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]\r\n         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or\r\n         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]\r\n         *   ERRORS          {boolean|number}   true, false, 1 or 0\r\n         *   CRYPTO          {boolean|number}   true, false, 1 or 0\r\n         *   MODULO_MODE     {number}           0 to 9 inclusive\r\n         *   POW_PRECISION   {number}           0 to MAX inclusive\r\n         *   FORMAT          {object}           See BigNumber.prototype.toFormat\r\n         *      decimalSeparator       {string}\r\n         *      groupSeparator         {string}\r\n         *      groupSize              {number}\r\n         *      secondaryGroupSize     {number}\r\n         *      fractionGroupSeparator {string}\r\n         *      fractionGroupSize      {number}\r\n         *\r\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n         *\r\n         * E.g.\r\n         * BigNumber.config(20, 4) is equivalent to\r\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n         *\r\n         * Ignore properties/parameters set to null or undefined.\r\n         * Return an object with the properties current values.\r\n         */\r\n        BigNumber.config = function () {\r\n            var v, p,\r\n                i = 0,\r\n                r = {},\r\n                a = arguments,\r\n                o = a[0],\r\n                has = o && typeof o == 'object'\r\n                  ? function () { if ( o.hasOwnProperty(p) ) return ( v = o[p] ) != null; }\r\n                  : function () { if ( a.length > i ) return ( v = a[i++] ) != null; };\r\n\r\n            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n            // 'config() DECIMAL_PLACES not an integer: {v}'\r\n            // 'config() DECIMAL_PLACES out of range: {v}'\r\n            if ( has( p = 'DECIMAL_PLACES' ) && isValidInt( v, 0, MAX, 2, p ) ) {\r\n                DECIMAL_PLACES = v | 0;\r\n            }\r\n            r[p] = DECIMAL_PLACES;\r\n\r\n            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n            // 'config() ROUNDING_MODE not an integer: {v}'\r\n            // 'config() ROUNDING_MODE out of range: {v}'\r\n            if ( has( p = 'ROUNDING_MODE' ) && isValidInt( v, 0, 8, 2, p ) ) {\r\n                ROUNDING_MODE = v | 0;\r\n            }\r\n            r[p] = ROUNDING_MODE;\r\n\r\n            // EXPONENTIAL_AT {number|number[]}\r\n            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n            // 'config() EXPONENTIAL_AT not an integer: {v}'\r\n            // 'config() EXPONENTIAL_AT out of range: {v}'\r\n            if ( has( p = 'EXPONENTIAL_AT' ) ) {\r\n\r\n                if ( isArray(v) ) {\r\n                    if ( isValidInt( v[0], -MAX, 0, 2, p ) && isValidInt( v[1], 0, MAX, 2, p ) ) {\r\n                        TO_EXP_NEG = v[0] | 0;\r\n                        TO_EXP_POS = v[1] | 0;\r\n                    }\r\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\r\n                    TO_EXP_NEG = -( TO_EXP_POS = ( v < 0 ? -v : v ) | 0 );\r\n                }\r\n            }\r\n            r[p] = [ TO_EXP_NEG, TO_EXP_POS ];\r\n\r\n            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n            // 'config() RANGE not an integer: {v}'\r\n            // 'config() RANGE cannot be zero: {v}'\r\n            // 'config() RANGE out of range: {v}'\r\n            if ( has( p = 'RANGE' ) ) {\r\n\r\n                if ( isArray(v) ) {\r\n                    if ( isValidInt( v[0], -MAX, -1, 2, p ) && isValidInt( v[1], 1, MAX, 2, p ) ) {\r\n                        MIN_EXP = v[0] | 0;\r\n                        MAX_EXP = v[1] | 0;\r\n                    }\r\n                } else if ( isValidInt( v, -MAX, MAX, 2, p ) ) {\r\n                    if ( v | 0 ) MIN_EXP = -( MAX_EXP = ( v < 0 ? -v : v ) | 0 );\r\n                    else if (ERRORS) raise( 2, p + ' cannot be zero', v );\r\n                }\r\n            }\r\n            r[p] = [ MIN_EXP, MAX_EXP ];\r\n\r\n            // ERRORS {boolean|number} true, false, 1 or 0.\r\n            // 'config() ERRORS not a boolean or binary digit: {v}'\r\n            if ( has( p = 'ERRORS' ) ) {\r\n\r\n                if ( v === !!v || v === 1 || v === 0 ) {\r\n                    id = 0;\r\n                    isValidInt = ( ERRORS = !!v ) ? intValidatorWithErrors : intValidatorNoErrors;\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + notBool, v );\r\n                }\r\n            }\r\n            r[p] = ERRORS;\r\n\r\n            // CRYPTO {boolean|number} true, false, 1 or 0.\r\n            // 'config() CRYPTO not a boolean or binary digit: {v}'\r\n            // 'config() crypto unavailable: {crypto}'\r\n            if ( has( p = 'CRYPTO' ) ) {\r\n\r\n                if ( v === !!v || v === 1 || v === 0 ) {\r\n                    CRYPTO = !!( v && crypto && typeof crypto == 'object' );\r\n                    if ( v && !CRYPTO && ERRORS ) raise( 2, 'crypto unavailable', crypto );\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + notBool, v );\r\n                }\r\n            }\r\n            r[p] = CRYPTO;\r\n\r\n            // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n            // 'config() MODULO_MODE not an integer: {v}'\r\n            // 'config() MODULO_MODE out of range: {v}'\r\n            if ( has( p = 'MODULO_MODE' ) && isValidInt( v, 0, 9, 2, p ) ) {\r\n                MODULO_MODE = v | 0;\r\n            }\r\n            r[p] = MODULO_MODE;\r\n\r\n            // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n            // 'config() POW_PRECISION not an integer: {v}'\r\n            // 'config() POW_PRECISION out of range: {v}'\r\n            if ( has( p = 'POW_PRECISION' ) && isValidInt( v, 0, MAX, 2, p ) ) {\r\n                POW_PRECISION = v | 0;\r\n            }\r\n            r[p] = POW_PRECISION;\r\n\r\n            // FORMAT {object}\r\n            // 'config() FORMAT not an object: {v}'\r\n            if ( has( p = 'FORMAT' ) ) {\r\n\r\n                if ( typeof v == 'object' ) {\r\n                    FORMAT = v;\r\n                } else if (ERRORS) {\r\n                    raise( 2, p + ' not an object', v );\r\n                }\r\n            }\r\n            r[p] = FORMAT;\r\n\r\n            return r;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the maximum of the arguments.\r\n         *\r\n         * arguments {number|string|BigNumber}\r\n         */\r\n        BigNumber.max = function () { return maxOrMin( arguments, P.lt ); };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the minimum of the arguments.\r\n         *\r\n         * arguments {number|string|BigNumber}\r\n         */\r\n        BigNumber.min = function () { return maxOrMin( arguments, P.gt ); };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n         * zeros are produced).\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         *\r\n         * 'random() decimal places not an integer: {dp}'\r\n         * 'random() decimal places out of range: {dp}'\r\n         * 'random() crypto unavailable: {crypto}'\r\n         */\r\n        BigNumber.random = (function () {\r\n            var pow2_53 = 0x20000000000000;\r\n\r\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n            // Check if Math.random() produces more than 32 bits of randomness.\r\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n              ? function () { return mathfloor( Math.random() * pow2_53 ); }\r\n              : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n                  (Math.random() * 0x800000 | 0); };\r\n\r\n            return function (dp) {\r\n                var a, b, e, k, v,\r\n                    i = 0,\r\n                    c = [],\r\n                    rand = new BigNumber(ONE);\r\n\r\n                dp = dp == null || !isValidInt( dp, 0, MAX, 14 ) ? DECIMAL_PLACES : dp | 0;\r\n                k = mathceil( dp / LOG_BASE );\r\n\r\n                if (CRYPTO) {\r\n\r\n                    // Browsers supporting crypto.getRandomValues.\r\n                    if ( crypto && crypto.getRandomValues ) {\r\n\r\n                        a = crypto.getRandomValues( new Uint32Array( k *= 2 ) );\r\n\r\n                        for ( ; i < k; ) {\r\n\r\n                            // 53 bits:\r\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n                            //                                     11111 11111111 11111111\r\n                            // 0x20000 is 2^21.\r\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n                            // Rejection sampling:\r\n                            // 0 <= v < 9007199254740992\r\n                            // Probability that v >= 9e15, is\r\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n                            if ( v >= 9e15 ) {\r\n                                b = crypto.getRandomValues( new Uint32Array(2) );\r\n                                a[i] = b[0];\r\n                                a[i + 1] = b[1];\r\n                            } else {\r\n\r\n                                // 0 <= v <= 8999999999999999\r\n                                // 0 <= (v % 1e14) <= 99999999999999\r\n                                c.push( v % 1e14 );\r\n                                i += 2;\r\n                            }\r\n                        }\r\n                        i = k / 2;\r\n\r\n                    // Node.js supporting crypto.randomBytes.\r\n                    } else if ( crypto && crypto.randomBytes ) {\r\n\r\n                        // buffer\r\n                        a = crypto.randomBytes( k *= 7 );\r\n\r\n                        for ( ; i < k; ) {\r\n\r\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n                            // 0 <= v < 9007199254740992\r\n                            v = ( ( a[i] & 31 ) * 0x1000000000000 ) + ( a[i + 1] * 0x10000000000 ) +\r\n                                  ( a[i + 2] * 0x100000000 ) + ( a[i + 3] * 0x1000000 ) +\r\n                                  ( a[i + 4] << 16 ) + ( a[i + 5] << 8 ) + a[i + 6];\r\n\r\n                            if ( v >= 9e15 ) {\r\n                                crypto.randomBytes(7).copy( a, i );\r\n                            } else {\r\n\r\n                                // 0 <= (v % 1e14) <= 99999999999999\r\n                                c.push( v % 1e14 );\r\n                                i += 7;\r\n                            }\r\n                        }\r\n                        i = k / 7;\r\n                    } else if (ERRORS) {\r\n                        raise( 14, 'crypto unavailable', crypto );\r\n                    }\r\n                }\r\n\r\n                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.\r\n                if (!i) {\r\n\r\n                    for ( ; i < k; ) {\r\n                        v = random53bitInt();\r\n                        if ( v < 9e15 ) c[i++] = v % 1e14;\r\n                    }\r\n                }\r\n\r\n                k = c[--i];\r\n                dp %= LOG_BASE;\r\n\r\n                // Convert trailing digits to zeros according to dp.\r\n                if ( k && dp ) {\r\n                    v = POWS_TEN[LOG_BASE - dp];\r\n                    c[i] = mathfloor( k / v ) * v;\r\n                }\r\n\r\n                // Remove trailing elements which are zero.\r\n                for ( ; c[i] === 0; c.pop(), i-- );\r\n\r\n                // Zero?\r\n                if ( i < 0 ) {\r\n                    c = [ e = 0 ];\r\n                } else {\r\n\r\n                    // Remove leading elements which are zero and adjust exponent accordingly.\r\n                    for ( e = -1 ; c[0] === 0; c.shift(), e -= LOG_BASE);\r\n\r\n                    // Count the digits of the first element of c to determine leading zeros, and...\r\n                    for ( i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n                    // adjust the exponent accordingly.\r\n                    if ( i < LOG_BASE ) e -= LOG_BASE - i;\r\n                }\r\n\r\n                rand.e = e;\r\n                rand.c = c;\r\n                return rand;\r\n            };\r\n        })();\r\n\r\n\r\n        // PRIVATE FUNCTIONS\r\n\r\n\r\n        // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n        function convertBase( str, baseOut, baseIn, sign ) {\r\n            var d, e, k, r, x, xc, y,\r\n                i = str.indexOf( '.' ),\r\n                dp = DECIMAL_PLACES,\r\n                rm = ROUNDING_MODE;\r\n\r\n            if ( baseIn < 37 ) str = str.toLowerCase();\r\n\r\n            // Non-integer.\r\n            if ( i >= 0 ) {\r\n                k = POW_PRECISION;\r\n\r\n                // Unlimited precision.\r\n                POW_PRECISION = 0;\r\n                str = str.replace( '.', '' );\r\n                y = new BigNumber(baseIn);\r\n                x = y.pow( str.length - i );\r\n                POW_PRECISION = k;\r\n\r\n                // Convert str as if an integer, then restore the fraction part by dividing the\r\n                // result by its base raised to a power.\r\n                y.c = toBaseOut( toFixedPoint( coeffToString( x.c ), x.e ), 10, baseOut );\r\n                y.e = y.c.length;\r\n            }\r\n\r\n            // Convert the number as integer.\r\n            xc = toBaseOut( str, baseIn, baseOut );\r\n            e = k = xc.length;\r\n\r\n            // Remove trailing zeros.\r\n            for ( ; xc[--k] == 0; xc.pop() );\r\n            if ( !xc[0] ) return '0';\r\n\r\n            if ( i < 0 ) {\r\n                --e;\r\n            } else {\r\n                x.c = xc;\r\n                x.e = e;\r\n\r\n                // sign is needed for correct rounding.\r\n                x.s = sign;\r\n                x = div( x, y, dp, rm, baseOut );\r\n                xc = x.c;\r\n                r = x.r;\r\n                e = x.e;\r\n            }\r\n\r\n            d = e + dp + 1;\r\n\r\n            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.\r\n            i = xc[d];\r\n            k = baseOut / 2;\r\n            r = r || d < 0 || xc[d + 1] != null;\r\n\r\n            r = rm < 4 ? ( i != null || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\r\n                       : i > k || i == k &&( rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n                         rm == ( x.s < 0 ? 8 : 7 ) );\r\n\r\n            if ( d < 1 || !xc[0] ) {\r\n\r\n                // 1^-dp or 0.\r\n                str = r ? toFixedPoint( '1', -dp ) : '0';\r\n            } else {\r\n                xc.length = d;\r\n\r\n                if (r) {\r\n\r\n                    // Rounding up may mean the previous digit has to be rounded up and so on.\r\n                    for ( --baseOut; ++xc[--d] > baseOut; ) {\r\n                        xc[d] = 0;\r\n\r\n                        if ( !d ) {\r\n                            ++e;\r\n                            xc.unshift(1);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Determine trailing zeros.\r\n                for ( k = xc.length; !xc[--k]; );\r\n\r\n                // E.g. [4, 11, 15] becomes 4bf.\r\n                for ( i = 0, str = ''; i <= k; str += ALPHABET.charAt( xc[i++] ) );\r\n                str = toFixedPoint( str, e );\r\n            }\r\n\r\n            // The caller will add the sign.\r\n            return str;\r\n        }\r\n\r\n\r\n        // Perform division in the specified base. Called by div and convertBase.\r\n        div = (function () {\r\n\r\n            // Assume non-zero x and k.\r\n            function multiply( x, k, base ) {\r\n                var m, temp, xlo, xhi,\r\n                    carry = 0,\r\n                    i = x.length,\r\n                    klo = k % SQRT_BASE,\r\n                    khi = k / SQRT_BASE | 0;\r\n\r\n                for ( x = x.slice(); i--; ) {\r\n                    xlo = x[i] % SQRT_BASE;\r\n                    xhi = x[i] / SQRT_BASE | 0;\r\n                    m = khi * xlo + xhi * klo;\r\n                    temp = klo * xlo + ( ( m % SQRT_BASE ) * SQRT_BASE ) + carry;\r\n                    carry = ( temp / base | 0 ) + ( m / SQRT_BASE | 0 ) + khi * xhi;\r\n                    x[i] = temp % base;\r\n                }\r\n\r\n                if (carry) x.unshift(carry);\r\n\r\n                return x;\r\n            }\r\n\r\n            function compare( a, b, aL, bL ) {\r\n                var i, cmp;\r\n\r\n                if ( aL != bL ) {\r\n                    cmp = aL > bL ? 1 : -1;\r\n                } else {\r\n\r\n                    for ( i = cmp = 0; i < aL; i++ ) {\r\n\r\n                        if ( a[i] != b[i] ) {\r\n                            cmp = a[i] > b[i] ? 1 : -1;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return cmp;\r\n            }\r\n\r\n            function subtract( a, b, aL, base ) {\r\n                var i = 0;\r\n\r\n                // Subtract b from a.\r\n                for ( ; aL--; ) {\r\n                    a[aL] -= i;\r\n                    i = a[aL] < b[aL] ? 1 : 0;\r\n                    a[aL] = i * base + a[aL] - b[aL];\r\n                }\r\n\r\n                // Remove leading zeros.\r\n                for ( ; !a[0] && a.length > 1; a.shift() );\r\n            }\r\n\r\n            // x: dividend, y: divisor.\r\n            return function ( x, y, dp, rm, base ) {\r\n                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n                    yL, yz,\r\n                    s = x.s == y.s ? 1 : -1,\r\n                    xc = x.c,\r\n                    yc = y.c;\r\n\r\n                // Either NaN, Infinity or 0?\r\n                if ( !xc || !xc[0] || !yc || !yc[0] ) {\r\n\r\n                    return new BigNumber(\r\n\r\n                      // Return NaN if either NaN, or both Infinity or 0.\r\n                      !x.s || !y.s || ( xc ? yc && xc[0] == yc[0] : !yc ) ? NaN :\r\n\r\n                        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n                        xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n                    );\r\n                }\r\n\r\n                q = new BigNumber(s);\r\n                qc = q.c = [];\r\n                e = x.e - y.e;\r\n                s = dp + e + 1;\r\n\r\n                if ( !base ) {\r\n                    base = BASE;\r\n                    e = bitFloor( x.e / LOG_BASE ) - bitFloor( y.e / LOG_BASE );\r\n                    s = s / LOG_BASE | 0;\r\n                }\r\n\r\n                // Result exponent may be one less then the current value of e.\r\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n                for ( i = 0; yc[i] == ( xc[i] || 0 ); i++ );\r\n                if ( yc[i] > ( xc[i] || 0 ) ) e--;\r\n\r\n                if ( s < 0 ) {\r\n                    qc.push(1);\r\n                    more = true;\r\n                } else {\r\n                    xL = xc.length;\r\n                    yL = yc.length;\r\n                    i = 0;\r\n                    s += 2;\r\n\r\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n                    n = mathfloor( base / ( yc[0] + 1 ) );\r\n\r\n                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.\r\n                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {\r\n                    if ( n > 1 ) {\r\n                        yc = multiply( yc, n, base );\r\n                        xc = multiply( xc, n, base );\r\n                        yL = yc.length;\r\n                        xL = xc.length;\r\n                    }\r\n\r\n                    xi = yL;\r\n                    rem = xc.slice( 0, yL );\r\n                    remL = rem.length;\r\n\r\n                    // Add zeros to make remainder as long as divisor.\r\n                    for ( ; remL < yL; rem[remL++] = 0 );\r\n                    yz = yc.slice();\r\n                    yz.unshift(0);\r\n                    yc0 = yc[0];\r\n                    if ( yc[1] >= base / 2 ) yc0++;\r\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;\r\n\r\n                    do {\r\n                        n = 0;\r\n\r\n                        // Compare divisor and remainder.\r\n                        cmp = compare( yc, rem, yL, remL );\r\n\r\n                        // If divisor < remainder.\r\n                        if ( cmp < 0 ) {\r\n\r\n                            // Calculate trial digit, n.\r\n\r\n                            rem0 = rem[0];\r\n                            if ( yL != remL ) rem0 = rem0 * base + ( rem[1] || 0 );\r\n\r\n                            // n is how many times the divisor goes into the current remainder.\r\n                            n = mathfloor( rem0 / yc0 );\r\n\r\n                            //  Algorithm:\r\n                            //  1. product = divisor * trial digit (n)\r\n                            //  2. if product > remainder: product -= divisor, n--\r\n                            //  3. remainder -= product\r\n                            //  4. if product was < remainder at 2:\r\n                            //    5. compare new remainder and divisor\r\n                            //    6. If remainder > divisor: remainder -= divisor, n++\r\n\r\n                            if ( n > 1 ) {\r\n\r\n                                // n may be > base only when base is 3.\r\n                                if (n >= base) n = base - 1;\r\n\r\n                                // product = divisor * trial digit.\r\n                                prod = multiply( yc, n, base );\r\n                                prodL = prod.length;\r\n                                remL = rem.length;\r\n\r\n                                // Compare product and remainder.\r\n                                // If product > remainder.\r\n                                // Trial digit n too high.\r\n                                // n is 1 too high about 5% of the time, and is not known to have\r\n                                // ever been more than 1 too high.\r\n                                while ( compare( prod, rem, prodL, remL ) == 1 ) {\r\n                                    n--;\r\n\r\n                                    // Subtract divisor from product.\r\n                                    subtract( prod, yL < prodL ? yz : yc, prodL, base );\r\n                                    prodL = prod.length;\r\n                                    cmp = 1;\r\n                                }\r\n                            } else {\r\n\r\n                                // n is 0 or 1, cmp is -1.\r\n                                // If n is 0, there is no need to compare yc and rem again below,\r\n                                // so change cmp to 1 to avoid it.\r\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                                if ( n == 0 ) {\r\n\r\n                                    // divisor < remainder, so n must be at least 1.\r\n                                    cmp = n = 1;\r\n                                }\r\n\r\n                                // product = divisor\r\n                                prod = yc.slice();\r\n                                prodL = prod.length;\r\n                            }\r\n\r\n                            if ( prodL < remL ) prod.unshift(0);\r\n\r\n                            // Subtract product from remainder.\r\n                            subtract( rem, prod, remL, base );\r\n                            remL = rem.length;\r\n\r\n                             // If product was < remainder.\r\n                            if ( cmp == -1 ) {\r\n\r\n                                // Compare divisor and new remainder.\r\n                                // If divisor < new remainder, subtract divisor from remainder.\r\n                                // Trial digit n too low.\r\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                                while ( compare( yc, rem, yL, remL ) < 1 ) {\r\n                                    n++;\r\n\r\n                                    // Subtract divisor from remainder.\r\n                                    subtract( rem, yL < remL ? yz : yc, remL, base );\r\n                                    remL = rem.length;\r\n                                }\r\n                            }\r\n                        } else if ( cmp === 0 ) {\r\n                            n++;\r\n                            rem = [0];\r\n                        } // else cmp === 1 and n will be 0\r\n\r\n                        // Add the next digit, n, to the result array.\r\n                        qc[i++] = n;\r\n\r\n                        // Update the remainder.\r\n                        if ( rem[0] ) {\r\n                            rem[remL++] = xc[xi] || 0;\r\n                        } else {\r\n                            rem = [ xc[xi] ];\r\n                            remL = 1;\r\n                        }\r\n                    } while ( ( xi++ < xL || rem[0] != null ) && s-- );\r\n\r\n                    more = rem[0] != null;\r\n\r\n                    // Leading zero?\r\n                    if ( !qc[0] ) qc.shift();\r\n                }\r\n\r\n                if ( base == BASE ) {\r\n\r\n                    // To calculate q.e, first get the number of digits of qc[0].\r\n                    for ( i = 1, s = qc[0]; s >= 10; s /= 10, i++ );\r\n                    round( q, dp + ( q.e = i + e * LOG_BASE - 1 ) + 1, rm, more );\r\n\r\n                // Caller is convertBase.\r\n                } else {\r\n                    q.e = e;\r\n                    q.r = +more;\r\n                }\r\n\r\n                return q;\r\n            };\r\n        })();\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n         * notation rounded to the specified decimal places or significant digits.\r\n         *\r\n         * n is a BigNumber.\r\n         * i is the index of the last digit required (i.e. the digit that may be rounded up).\r\n         * rm is the rounding mode.\r\n         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.\r\n         */\r\n        function format( n, i, rm, caller ) {\r\n            var c0, e, ne, len, str;\r\n\r\n            rm = rm != null && isValidInt( rm, 0, 8, caller, roundingMode )\r\n              ? rm | 0 : ROUNDING_MODE;\r\n\r\n            if ( !n.c ) return n.toString();\r\n            c0 = n.c[0];\r\n            ne = n.e;\r\n\r\n            if ( i == null ) {\r\n                str = coeffToString( n.c );\r\n                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG\r\n                  ? toExponential( str, ne )\r\n                  : toFixedPoint( str, ne );\r\n            } else {\r\n                n = round( new BigNumber(n), i, rm );\r\n\r\n                // n.e may have changed if the value was rounded up.\r\n                e = n.e;\r\n\r\n                str = coeffToString( n.c );\r\n                len = str.length;\r\n\r\n                // toPrecision returns exponential notation if the number of significant digits\r\n                // specified is less than the number of digits necessary to represent the integer\r\n                // part of the value in fixed-point notation.\r\n\r\n                // Exponential notation.\r\n                if ( caller == 19 || caller == 24 && ( i <= e || e <= TO_EXP_NEG ) ) {\r\n\r\n                    // Append zeros?\r\n                    for ( ; len < i; str += '0', len++ );\r\n                    str = toExponential( str, e );\r\n\r\n                // Fixed-point notation.\r\n                } else {\r\n                    i -= ne;\r\n                    str = toFixedPoint( str, e );\r\n\r\n                    // Append zeros?\r\n                    if ( e + 1 > len ) {\r\n                        if ( --i > 0 ) for ( str += '.'; i--; str += '0' );\r\n                    } else {\r\n                        i += e - len;\r\n                        if ( i > 0 ) {\r\n                            if ( e + 1 == len ) str += '.';\r\n                            for ( ; i--; str += '0' );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return n.s < 0 && c0 ? '-' + str : str;\r\n        }\r\n\r\n\r\n        // Handle BigNumber.max and BigNumber.min.\r\n        function maxOrMin( args, method ) {\r\n            var m, n,\r\n                i = 0;\r\n\r\n            if ( isArray( args[0] ) ) args = args[0];\r\n            m = new BigNumber( args[0] );\r\n\r\n            for ( ; ++i < args.length; ) {\r\n                n = new BigNumber( args[i] );\r\n\r\n                // If any number is NaN, return NaN.\r\n                if ( !n.s ) {\r\n                    m = n;\r\n                    break;\r\n                } else if ( method.call( m, n ) ) {\r\n                    m = n;\r\n                }\r\n            }\r\n\r\n            return m;\r\n        }\r\n\r\n\r\n        /*\r\n         * Return true if n is an integer in range, otherwise throw.\r\n         * Use for argument validation when ERRORS is true.\r\n         */\r\n        function intValidatorWithErrors( n, min, max, caller, name ) {\r\n            if ( n < min || n > max || n != truncate(n) ) {\r\n                raise( caller, ( name || 'decimal places' ) +\r\n                  ( n < min || n > max ? ' out of range' : ' not an integer' ), n );\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n\r\n        /*\r\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n         * Called by minus, plus and times.\r\n         */\r\n        function normalise( n, c, e ) {\r\n            var i = 1,\r\n                j = c.length;\r\n\r\n             // Remove trailing zeros.\r\n            for ( ; !c[--j]; c.pop() );\r\n\r\n            // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n            for ( j = c[0]; j >= 10; j /= 10, i++ );\r\n\r\n            // Overflow?\r\n            if ( ( e = i + e * LOG_BASE - 1 ) > MAX_EXP ) {\r\n\r\n                // Infinity.\r\n                n.c = n.e = null;\r\n\r\n            // Underflow?\r\n            } else if ( e < MIN_EXP ) {\r\n\r\n                // Zero.\r\n                n.c = [ n.e = 0 ];\r\n            } else {\r\n                n.e = e;\r\n                n.c = c;\r\n            }\r\n\r\n            return n;\r\n        }\r\n\r\n\r\n        // Handle values that fail the validity test in BigNumber.\r\n        parseNumeric = (function () {\r\n            var basePrefix = /^(-?)0([xbo])/i,\r\n                dotAfter = /^([^.]+)\\.$/,\r\n                dotBefore = /^\\.([^.]+)$/,\r\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n                whitespaceOrPlus = /^\\s*\\+|^\\s+|\\s+$/g;\r\n\r\n            return function ( x, str, num, b ) {\r\n                var base,\r\n                    s = num ? str : str.replace( whitespaceOrPlus, '' );\r\n\r\n                // No exception on ±Infinity or NaN.\r\n                if ( isInfinityOrNaN.test(s) ) {\r\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n                } else {\r\n                    if ( !num ) {\r\n\r\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n                        s = s.replace( basePrefix, function ( m, p1, p2 ) {\r\n                            base = ( p2 = p2.toLowerCase() ) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n                            return !b || b == base ? p1 : m;\r\n                        });\r\n\r\n                        if (b) {\r\n                            base = b;\r\n\r\n                            // E.g. '1.' to '1', '.1' to '0.1'\r\n                            s = s.replace( dotAfter, '$1' ).replace( dotBefore, '0.$1' );\r\n                        }\r\n\r\n                        if ( str != s ) return new BigNumber( s, base );\r\n                    }\r\n\r\n                    // 'new BigNumber() not a number: {n}'\r\n                    // 'new BigNumber() not a base {b} number: {n}'\r\n                    if (ERRORS) raise( id, 'not a' + ( b ? ' base ' + b : '' ) + ' number', str );\r\n                    x.s = null;\r\n                }\r\n\r\n                x.c = x.e = null;\r\n                id = 0;\r\n            }\r\n        })();\r\n\r\n\r\n        // Throw a BigNumber Error.\r\n        function raise( caller, msg, val ) {\r\n            var error = new Error( [\r\n                'new BigNumber',     // 0\r\n                'cmp',               // 1\r\n                'config',            // 2\r\n                'div',               // 3\r\n                'divToInt',          // 4\r\n                'eq',                // 5\r\n                'gt',                // 6\r\n                'gte',               // 7\r\n                'lt',                // 8\r\n                'lte',               // 9\r\n                'minus',             // 10\r\n                'mod',               // 11\r\n                'plus',              // 12\r\n                'precision',         // 13\r\n                'random',            // 14\r\n                'round',             // 15\r\n                'shift',             // 16\r\n                'times',             // 17\r\n                'toDigits',          // 18\r\n                'toExponential',     // 19\r\n                'toFixed',           // 20\r\n                'toFormat',          // 21\r\n                'toFraction',        // 22\r\n                'pow',               // 23\r\n                'toPrecision',       // 24\r\n                'toString',          // 25\r\n                'BigNumber'          // 26\r\n            ][caller] + '() ' + msg + ': ' + val );\r\n\r\n            error.name = 'BigNumber Error';\r\n            id = 0;\r\n            throw error;\r\n        }\r\n\r\n\r\n        /*\r\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n         * If r is truthy, it is known that there are more digits after the rounding digit.\r\n         */\r\n        function round( x, sd, rm, r ) {\r\n            var d, i, j, k, n, ni, rd,\r\n                xc = x.c,\r\n                pows10 = POWS_TEN;\r\n\r\n            // if x is not Infinity or NaN...\r\n            if (xc) {\r\n\r\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n                // ni is the index of n within x.c.\r\n                // d is the number of digits of n.\r\n                // i is the index of rd within n including leading zeros.\r\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n                out: {\r\n\r\n                    // Get the number of digits of the first element of xc.\r\n                    for ( d = 1, k = xc[0]; k >= 10; k /= 10, d++ );\r\n                    i = sd - d;\r\n\r\n                    // If the rounding digit is in the first element of xc...\r\n                    if ( i < 0 ) {\r\n                        i += LOG_BASE;\r\n                        j = sd;\r\n                        n = xc[ ni = 0 ];\r\n\r\n                        // Get the rounding digit at index j of n.\r\n                        rd = n / pows10[ d - j - 1 ] % 10 | 0;\r\n                    } else {\r\n                        ni = mathceil( ( i + 1 ) / LOG_BASE );\r\n\r\n                        if ( ni >= xc.length ) {\r\n\r\n                            if (r) {\r\n\r\n                                // Needed by sqrt.\r\n                                for ( ; xc.length <= ni; xc.push(0) );\r\n                                n = rd = 0;\r\n                                d = 1;\r\n                                i %= LOG_BASE;\r\n                                j = i - LOG_BASE + 1;\r\n                            } else {\r\n                                break out;\r\n                            }\r\n                        } else {\r\n                            n = k = xc[ni];\r\n\r\n                            // Get the number of digits of n.\r\n                            for ( d = 1; k >= 10; k /= 10, d++ );\r\n\r\n                            // Get the index of rd within n.\r\n                            i %= LOG_BASE;\r\n\r\n                            // Get the index of rd within n, adjusted for leading zeros.\r\n                            // The number of leading zeros of n is given by LOG_BASE - d.\r\n                            j = i - LOG_BASE + d;\r\n\r\n                            // Get the rounding digit at index j of n.\r\n                            rd = j < 0 ? 0 : n / pows10[ d - j - 1 ] % 10 | 0;\r\n                        }\r\n                    }\r\n\r\n                    r = r || sd < 0 ||\r\n\r\n                    // Are there any non-zero digits after the rounding digit?\r\n                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right\r\n                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n                      xc[ni + 1] != null || ( j < 0 ? n : n % pows10[ d - j - 1 ] );\r\n\r\n                    r = rm < 4\r\n                      ? ( rd || r ) && ( rm == 0 || rm == ( x.s < 0 ? 3 : 2 ) )\r\n                      : rd > 5 || rd == 5 && ( rm == 4 || r || rm == 6 &&\r\n\r\n                        // Check whether the digit to the left of the rounding digit is odd.\r\n                        ( ( i > 0 ? j > 0 ? n / pows10[ d - j ] : 0 : xc[ni - 1] ) % 10 ) & 1 ||\r\n                          rm == ( x.s < 0 ? 8 : 7 ) );\r\n\r\n                    if ( sd < 1 || !xc[0] ) {\r\n                        xc.length = 0;\r\n\r\n                        if (r) {\r\n\r\n                            // Convert sd to decimal places.\r\n                            sd -= x.e + 1;\r\n\r\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n                            xc[0] = pows10[ sd % LOG_BASE ];\r\n                            x.e = -sd || 0;\r\n                        } else {\r\n\r\n                            // Zero.\r\n                            xc[0] = x.e = 0;\r\n                        }\r\n\r\n                        return x;\r\n                    }\r\n\r\n                    // Remove excess digits.\r\n                    if ( i == 0 ) {\r\n                        xc.length = ni;\r\n                        k = 1;\r\n                        ni--;\r\n                    } else {\r\n                        xc.length = ni + 1;\r\n                        k = pows10[ LOG_BASE - i ];\r\n\r\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n                        // j > 0 means i > number of leading zeros of n.\r\n                        xc[ni] = j > 0 ? mathfloor( n / pows10[ d - j ] % pows10[j] ) * k : 0;\r\n                    }\r\n\r\n                    // Round up?\r\n                    if (r) {\r\n\r\n                        for ( ; ; ) {\r\n\r\n                            // If the digit to be rounded up is in the first element of xc...\r\n                            if ( ni == 0 ) {\r\n\r\n                                // i will be the length of xc[0] before k is added.\r\n                                for ( i = 1, j = xc[0]; j >= 10; j /= 10, i++ );\r\n                                j = xc[0] += k;\r\n                                for ( k = 1; j >= 10; j /= 10, k++ );\r\n\r\n                                // if i != k the length has increased.\r\n                                if ( i != k ) {\r\n                                    x.e++;\r\n                                    if ( xc[0] == BASE ) xc[0] = 1;\r\n                                }\r\n\r\n                                break;\r\n                            } else {\r\n                                xc[ni] += k;\r\n                                if ( xc[ni] != BASE ) break;\r\n                                xc[ni--] = 0;\r\n                                k = 1;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Remove trailing zeros.\r\n                    for ( i = xc.length; xc[--i] === 0; xc.pop() );\r\n                }\r\n\r\n                // Overflow? Infinity.\r\n                if ( x.e > MAX_EXP ) {\r\n                    x.c = x.e = null;\r\n\r\n                // Underflow? Zero.\r\n                } else if ( x.e < MIN_EXP ) {\r\n                    x.c = [ x.e = 0 ];\r\n                }\r\n            }\r\n\r\n            return x;\r\n        }\r\n\r\n\r\n        // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n         */\r\n        P.absoluteValue = P.abs = function () {\r\n            var x = new BigNumber(this);\r\n            if ( x.s < 0 ) x.s = 1;\r\n            return x;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n         * number in the direction of Infinity.\r\n         */\r\n        P.ceil = function () {\r\n            return round( new BigNumber(this), this.e + 1, 2 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return\r\n         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n         * 0 if they have the same value,\r\n         * or null if the value of either is NaN.\r\n         */\r\n        P.comparedTo = P.cmp = function ( y, b ) {\r\n            id = 1;\r\n            return compare( this, new BigNumber( y, b ) );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the number of decimal places of the value of this BigNumber, or null if the value\r\n         * of this BigNumber is ±Infinity or NaN.\r\n         */\r\n        P.decimalPlaces = P.dp = function () {\r\n            var n, v,\r\n                c = this.c;\r\n\r\n            if ( !c ) return null;\r\n            n = ( ( v = c.length - 1 ) - bitFloor( this.e / LOG_BASE ) ) * LOG_BASE;\r\n\r\n            // Subtract the number of trailing zeros of the last number.\r\n            if ( v = c[v] ) for ( ; v % 10 == 0; v /= 10, n-- );\r\n            if ( n < 0 ) n = 0;\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n / 0 = I\r\n         *  n / N = N\r\n         *  n / I = 0\r\n         *  0 / n = 0\r\n         *  0 / 0 = N\r\n         *  0 / N = N\r\n         *  0 / I = 0\r\n         *  N / n = N\r\n         *  N / 0 = N\r\n         *  N / N = N\r\n         *  N / I = N\r\n         *  I / n = I\r\n         *  I / 0 = I\r\n         *  I / N = N\r\n         *  I / I = N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         */\r\n        P.dividedBy = P.div = function ( y, b ) {\r\n            id = 3;\r\n            return div( this, new BigNumber( y, b ), DECIMAL_PLACES, ROUNDING_MODE );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n         * BigNumber by the value of BigNumber(y, b).\r\n         */\r\n        P.dividedToIntegerBy = P.divToInt = function ( y, b ) {\r\n            id = 4;\r\n            return div( this, new BigNumber( y, b ), 0, 1 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.equals = P.eq = function ( y, b ) {\r\n            id = 5;\r\n            return compare( this, new BigNumber( y, b ) ) === 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n         * number in the direction of -Infinity.\r\n         */\r\n        P.floor = function () {\r\n            return round( new BigNumber(this), this.e + 1, 3 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.greaterThan = P.gt = function ( y, b ) {\r\n            id = 6;\r\n            return compare( this, new BigNumber( y, b ) ) > 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is greater than or equal to the value of\r\n         * BigNumber(y, b), otherwise returns false.\r\n         */\r\n        P.greaterThanOrEqualTo = P.gte = function ( y, b ) {\r\n            id = 7;\r\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === 1 || b === 0;\r\n\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is a finite number, otherwise returns false.\r\n         */\r\n        P.isFinite = function () {\r\n            return !!this.c;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n         */\r\n        P.isInteger = P.isInt = function () {\r\n            return !!this.c && bitFloor( this.e / LOG_BASE ) > this.c.length - 2;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is NaN, otherwise returns false.\r\n         */\r\n        P.isNaN = function () {\r\n            return !this.s;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is negative, otherwise returns false.\r\n         */\r\n        P.isNegative = P.isNeg = function () {\r\n            return this.s < 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.\r\n         */\r\n        P.isZero = function () {\r\n            return !!this.c && this.c[0] == 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.lessThan = P.lt = function ( y, b ) {\r\n            id = 8;\r\n            return compare( this, new BigNumber( y, b ) ) < 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is less than or equal to the value of\r\n         * BigNumber(y, b), otherwise returns false.\r\n         */\r\n        P.lessThanOrEqualTo = P.lte = function ( y, b ) {\r\n            id = 9;\r\n            return ( b = compare( this, new BigNumber( y, b ) ) ) === -1 || b === 0;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n - 0 = n\r\n         *  n - N = N\r\n         *  n - I = -I\r\n         *  0 - n = -n\r\n         *  0 - 0 = 0\r\n         *  0 - N = N\r\n         *  0 - I = -I\r\n         *  N - n = N\r\n         *  N - 0 = N\r\n         *  N - N = N\r\n         *  N - I = N\r\n         *  I - n = I\r\n         *  I - 0 = I\r\n         *  I - N = N\r\n         *  I - I = N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.minus = P.sub = function ( y, b ) {\r\n            var i, j, t, xLTy,\r\n                x = this,\r\n                a = x.s;\r\n\r\n            id = 10;\r\n            y = new BigNumber( y, b );\r\n            b = y.s;\r\n\r\n            // Either NaN?\r\n            if ( !a || !b ) return new BigNumber(NaN);\r\n\r\n            // Signs differ?\r\n            if ( a != b ) {\r\n                y.s = -b;\r\n                return x.plus(y);\r\n            }\r\n\r\n            var xe = x.e / LOG_BASE,\r\n                ye = y.e / LOG_BASE,\r\n                xc = x.c,\r\n                yc = y.c;\r\n\r\n            if ( !xe || !ye ) {\r\n\r\n                // Either Infinity?\r\n                if ( !xc || !yc ) return xc ? ( y.s = -b, y ) : new BigNumber( yc ? x : NaN );\r\n\r\n                // Either zero?\r\n                if ( !xc[0] || !yc[0] ) {\r\n\r\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n                    return yc[0] ? ( y.s = -b, y ) : new BigNumber( xc[0] ? x :\r\n\r\n                      // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n                      ROUNDING_MODE == 3 ? -0 : 0 );\r\n                }\r\n            }\r\n\r\n            xe = bitFloor(xe);\r\n            ye = bitFloor(ye);\r\n            xc = xc.slice();\r\n\r\n            // Determine which is the bigger number.\r\n            if ( a = xe - ye ) {\r\n\r\n                if ( xLTy = a < 0 ) {\r\n                    a = -a;\r\n                    t = xc;\r\n                } else {\r\n                    ye = xe;\r\n                    t = yc;\r\n                }\r\n\r\n                t.reverse();\r\n\r\n                // Prepend zeros to equalise exponents.\r\n                for ( b = a; b--; t.push(0) );\r\n                t.reverse();\r\n            } else {\r\n\r\n                // Exponents equal. Check digit by digit.\r\n                j = ( xLTy = ( a = xc.length ) < ( b = yc.length ) ) ? a : b;\r\n\r\n                for ( a = b = 0; b < j; b++ ) {\r\n\r\n                    if ( xc[b] != yc[b] ) {\r\n                        xLTy = xc[b] < yc[b];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // x < y? Point xc to the array of the bigger number.\r\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n            b = ( j = yc.length ) - ( i = xc.length );\r\n\r\n            // Append zeros to xc if shorter.\r\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n            if ( b > 0 ) for ( ; b--; xc[i++] = 0 );\r\n            b = BASE - 1;\r\n\r\n            // Subtract yc from xc.\r\n            for ( ; j > a; ) {\r\n\r\n                if ( xc[--j] < yc[j] ) {\r\n                    for ( i = j; i && !xc[--i]; xc[i] = b );\r\n                    --xc[i];\r\n                    xc[j] += BASE;\r\n                }\r\n\r\n                xc[j] -= yc[j];\r\n            }\r\n\r\n            // Remove leading zeros and adjust exponent accordingly.\r\n            for ( ; xc[0] == 0; xc.shift(), --ye );\r\n\r\n            // Zero?\r\n            if ( !xc[0] ) {\r\n\r\n                // Following IEEE 754 (2008) 6.3,\r\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n                y.c = [ y.e = 0 ];\r\n                return y;\r\n            }\r\n\r\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n            // for finite x and y.\r\n            return normalise( y, xc, ye );\r\n        };\r\n\r\n\r\n        /*\r\n         *   n % 0 =  N\r\n         *   n % N =  N\r\n         *   n % I =  n\r\n         *   0 % n =  0\r\n         *  -0 % n = -0\r\n         *   0 % 0 =  N\r\n         *   0 % N =  N\r\n         *   0 % I =  0\r\n         *   N % n =  N\r\n         *   N % 0 =  N\r\n         *   N % N =  N\r\n         *   N % I =  N\r\n         *   I % n =  N\r\n         *   I % 0 =  N\r\n         *   I % N =  N\r\n         *   I % I =  N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n         */\r\n        P.modulo = P.mod = function ( y, b ) {\r\n            var q, s,\r\n                x = this;\r\n\r\n            id = 11;\r\n            y = new BigNumber( y, b );\r\n\r\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n            if ( !x.c || !y.s || y.c && !y.c[0] ) {\r\n                return new BigNumber(NaN);\r\n\r\n            // Return x if y is Infinity or x is zero.\r\n            } else if ( !y.c || x.c && !x.c[0] ) {\r\n                return new BigNumber(x);\r\n            }\r\n\r\n            if ( MODULO_MODE == 9 ) {\r\n\r\n                // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n                // r = x - qy    where  0 <= r < abs(y)\r\n                s = y.s;\r\n                y.s = 1;\r\n                q = div( x, y, 0, 3 );\r\n                y.s = s;\r\n                q.s *= s;\r\n            } else {\r\n                q = div( x, y, 0, MODULO_MODE );\r\n            }\r\n\r\n            return x.minus( q.times(y) );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n         * i.e. multiplied by -1.\r\n         */\r\n        P.negated = P.neg = function () {\r\n            var x = new BigNumber(this);\r\n            x.s = -x.s || null;\r\n            return x;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n + 0 = n\r\n         *  n + N = N\r\n         *  n + I = I\r\n         *  0 + n = n\r\n         *  0 + 0 = 0\r\n         *  0 + N = N\r\n         *  0 + I = I\r\n         *  N + n = N\r\n         *  N + 0 = N\r\n         *  N + N = N\r\n         *  N + I = N\r\n         *  I + n = I\r\n         *  I + 0 = I\r\n         *  I + N = N\r\n         *  I + I = I\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.plus = P.add = function ( y, b ) {\r\n            var t,\r\n                x = this,\r\n                a = x.s;\r\n\r\n            id = 12;\r\n            y = new BigNumber( y, b );\r\n            b = y.s;\r\n\r\n            // Either NaN?\r\n            if ( !a || !b ) return new BigNumber(NaN);\r\n\r\n            // Signs differ?\r\n             if ( a != b ) {\r\n                y.s = -b;\r\n                return x.minus(y);\r\n            }\r\n\r\n            var xe = x.e / LOG_BASE,\r\n                ye = y.e / LOG_BASE,\r\n                xc = x.c,\r\n                yc = y.c;\r\n\r\n            if ( !xe || !ye ) {\r\n\r\n                // Return ±Infinity if either ±Infinity.\r\n                if ( !xc || !yc ) return new BigNumber( a / 0 );\r\n\r\n                // Either zero?\r\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n                if ( !xc[0] || !yc[0] ) return yc[0] ? y : new BigNumber( xc[0] ? x : a * 0 );\r\n            }\r\n\r\n            xe = bitFloor(xe);\r\n            ye = bitFloor(ye);\r\n            xc = xc.slice();\r\n\r\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n            if ( a = xe - ye ) {\r\n                if ( a > 0 ) {\r\n                    ye = xe;\r\n                    t = yc;\r\n                } else {\r\n                    a = -a;\r\n                    t = xc;\r\n                }\r\n\r\n                t.reverse();\r\n                for ( ; a--; t.push(0) );\r\n                t.reverse();\r\n            }\r\n\r\n            a = xc.length;\r\n            b = yc.length;\r\n\r\n            // Point xc to the longer array, and b to the shorter length.\r\n            if ( a - b < 0 ) t = yc, yc = xc, xc = t, b = a;\r\n\r\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n            for ( a = 0; b; ) {\r\n                a = ( xc[--b] = xc[b] + yc[b] + a ) / BASE | 0;\r\n                xc[b] %= BASE;\r\n            }\r\n\r\n            if (a) {\r\n                xc.unshift(a);\r\n                ++ye;\r\n            }\r\n\r\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n            // ye = MAX_EXP + 1 possible\r\n            return normalise( y, xc, ye );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the number of significant digits of the value of this BigNumber.\r\n         *\r\n         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n         */\r\n        P.precision = P.sd = function (z) {\r\n            var n, v,\r\n                x = this,\r\n                c = x.c;\r\n\r\n            // 'precision() argument not a boolean or binary digit: {z}'\r\n            if ( z != null && z !== !!z && z !== 1 && z !== 0 ) {\r\n                if (ERRORS) raise( 13, 'argument' + notBool, z );\r\n                if ( z != !!z ) z = null;\r\n            }\r\n\r\n            if ( !c ) return null;\r\n            v = c.length - 1;\r\n            n = v * LOG_BASE + 1;\r\n\r\n            if ( v = c[v] ) {\r\n\r\n                // Subtract the number of trailing zeros of the last element.\r\n                for ( ; v % 10 == 0; v /= 10, n-- );\r\n\r\n                // Add the number of digits of the first element.\r\n                for ( v = c[0]; v >= 10; v /= 10, n++ );\r\n            }\r\n\r\n            if ( z && x.e + 1 > n ) n = x.e + 1;\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if\r\n         * omitted.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'round() decimal places out of range: {dp}'\r\n         * 'round() decimal places not an integer: {dp}'\r\n         * 'round() rounding mode not an integer: {rm}'\r\n         * 'round() rounding mode out of range: {rm}'\r\n         */\r\n        P.round = function ( dp, rm ) {\r\n            var n = new BigNumber(this);\r\n\r\n            if ( dp == null || isValidInt( dp, 0, MAX, 15 ) ) {\r\n                round( n, ~~dp + this.e + 1, rm == null ||\r\n                  !isValidInt( rm, 0, 8, 15, roundingMode ) ? ROUNDING_MODE : rm | 0 );\r\n            }\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n         *\r\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n         *\r\n         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity\r\n         * otherwise.\r\n         *\r\n         * 'shift() argument not an integer: {k}'\r\n         * 'shift() argument out of range: {k}'\r\n         */\r\n        P.shift = function (k) {\r\n            var n = this;\r\n            return isValidInt( k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument' )\r\n\r\n              // k < 1e+21, or truncate(k) will produce exponential notation.\r\n              ? n.times( '1e' + truncate(k) )\r\n              : new BigNumber( n.c && n.c[0] && ( k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER )\r\n                ? n.s * ( k < 0 ? 0 : 1 / 0 )\r\n                : n );\r\n        };\r\n\r\n\r\n        /*\r\n         *  sqrt(-n) =  N\r\n         *  sqrt( N) =  N\r\n         *  sqrt(-I) =  N\r\n         *  sqrt( I) =  I\r\n         *  sqrt( 0) =  0\r\n         *  sqrt(-0) = -0\r\n         *\r\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         */\r\n        P.squareRoot = P.sqrt = function () {\r\n            var m, n, r, rep, t,\r\n                x = this,\r\n                c = x.c,\r\n                s = x.s,\r\n                e = x.e,\r\n                dp = DECIMAL_PLACES + 4,\r\n                half = new BigNumber('0.5');\r\n\r\n            // Negative/NaN/Infinity/zero?\r\n            if ( s !== 1 || !c || !c[0] ) {\r\n                return new BigNumber( !s || s < 0 && ( !c || c[0] ) ? NaN : c ? x : 1 / 0 );\r\n            }\r\n\r\n            // Initial estimate.\r\n            s = Math.sqrt( +x );\r\n\r\n            // Math.sqrt underflow/overflow?\r\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n            if ( s == 0 || s == 1 / 0 ) {\r\n                n = coeffToString(c);\r\n                if ( ( n.length + e ) % 2 == 0 ) n += '0';\r\n                s = Math.sqrt(n);\r\n                e = bitFloor( ( e + 1 ) / 2 ) - ( e < 0 || e % 2 );\r\n\r\n                if ( s == 1 / 0 ) {\r\n                    n = '1e' + e;\r\n                } else {\r\n                    n = s.toExponential();\r\n                    n = n.slice( 0, n.indexOf('e') + 1 ) + e;\r\n                }\r\n\r\n                r = new BigNumber(n);\r\n            } else {\r\n                r = new BigNumber( s + '' );\r\n            }\r\n\r\n            // Check for zero.\r\n            // r could be zero if MIN_EXP is changed after the this value was created.\r\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n            // coeffToString to throw.\r\n            if ( r.c[0] ) {\r\n                e = r.e;\r\n                s = e + dp;\r\n                if ( s < 3 ) s = 0;\r\n\r\n                // Newton-Raphson iteration.\r\n                for ( ; ; ) {\r\n                    t = r;\r\n                    r = half.times( t.plus( div( x, t, dp, 1 ) ) );\r\n\r\n                    if ( coeffToString( t.c   ).slice( 0, s ) === ( n =\r\n                         coeffToString( r.c ) ).slice( 0, s ) ) {\r\n\r\n                        // The exponent of r may here be one less than the final result exponent,\r\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n                        // are indexed correctly.\r\n                        if ( r.e < e ) --s;\r\n                        n = n.slice( s - 3, s + 1 );\r\n\r\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n                        // iteration.\r\n                        if ( n == '9999' || !rep && n == '4999' ) {\r\n\r\n                            // On the first iteration only, check to see if rounding up gives the\r\n                            // exact result as the nines may infinitely repeat.\r\n                            if ( !rep ) {\r\n                                round( t, t.e + DECIMAL_PLACES + 2, 0 );\r\n\r\n                                if ( t.times(t).eq(x) ) {\r\n                                    r = t;\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            dp += 4;\r\n                            s += 4;\r\n                            rep = 1;\r\n                        } else {\r\n\r\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n                            // result. If not, then there are further digits and m will be truthy.\r\n                            if ( !+n || !+n.slice(1) && n.charAt(0) == '5' ) {\r\n\r\n                                // Truncate to the first rounding digit.\r\n                                round( r, r.e + DECIMAL_PLACES + 2, 1 );\r\n                                m = !r.times(r).eq(x);\r\n                            }\r\n\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return round( r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m );\r\n        };\r\n\r\n\r\n        /*\r\n         *  n * 0 = 0\r\n         *  n * N = N\r\n         *  n * I = I\r\n         *  0 * n = 0\r\n         *  0 * 0 = 0\r\n         *  0 * N = N\r\n         *  0 * I = N\r\n         *  N * n = N\r\n         *  N * 0 = N\r\n         *  N * N = N\r\n         *  N * I = N\r\n         *  I * n = I\r\n         *  I * 0 = N\r\n         *  I * N = N\r\n         *  I * I = I\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber times the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.times = P.mul = function ( y, b ) {\r\n            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n                base, sqrtBase,\r\n                x = this,\r\n                xc = x.c,\r\n                yc = ( id = 17, y = new BigNumber( y, b ) ).c;\r\n\r\n            // Either NaN, ±Infinity or ±0?\r\n            if ( !xc || !yc || !xc[0] || !yc[0] ) {\r\n\r\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n                if ( !x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc ) {\r\n                    y.c = y.e = y.s = null;\r\n                } else {\r\n                    y.s *= x.s;\r\n\r\n                    // Return ±Infinity if either is ±Infinity.\r\n                    if ( !xc || !yc ) {\r\n                        y.c = y.e = null;\r\n\r\n                    // Return ±0 if either is ±0.\r\n                    } else {\r\n                        y.c = [0];\r\n                        y.e = 0;\r\n                    }\r\n                }\r\n\r\n                return y;\r\n            }\r\n\r\n            e = bitFloor( x.e / LOG_BASE ) + bitFloor( y.e / LOG_BASE );\r\n            y.s *= x.s;\r\n            xcL = xc.length;\r\n            ycL = yc.length;\r\n\r\n            // Ensure xc points to longer array and xcL to its length.\r\n            if ( xcL < ycL ) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n            // Initialise the result array with zeros.\r\n            for ( i = xcL + ycL, zc = []; i--; zc.push(0) );\r\n\r\n            base = BASE;\r\n            sqrtBase = SQRT_BASE;\r\n\r\n            for ( i = ycL; --i >= 0; ) {\r\n                c = 0;\r\n                ylo = yc[i] % sqrtBase;\r\n                yhi = yc[i] / sqrtBase | 0;\r\n\r\n                for ( k = xcL, j = i + k; j > i; ) {\r\n                    xlo = xc[--k] % sqrtBase;\r\n                    xhi = xc[k] / sqrtBase | 0;\r\n                    m = yhi * xlo + xhi * ylo;\r\n                    xlo = ylo * xlo + ( ( m % sqrtBase ) * sqrtBase ) + zc[j] + c;\r\n                    c = ( xlo / base | 0 ) + ( m / sqrtBase | 0 ) + yhi * xhi;\r\n                    zc[j--] = xlo % base;\r\n                }\r\n\r\n                zc[j] = c;\r\n            }\r\n\r\n            if (c) {\r\n                ++e;\r\n            } else {\r\n                zc.shift();\r\n            }\r\n\r\n            return normalise( y, zc, e );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n         *\r\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toDigits() precision out of range: {sd}'\r\n         * 'toDigits() precision not an integer: {sd}'\r\n         * 'toDigits() rounding mode not an integer: {rm}'\r\n         * 'toDigits() rounding mode out of range: {rm}'\r\n         */\r\n        P.toDigits = function ( sd, rm ) {\r\n            var n = new BigNumber(this);\r\n            sd = sd == null || !isValidInt( sd, 1, MAX, 18, 'precision' ) ? null : sd | 0;\r\n            rm = rm == null || !isValidInt( rm, 0, 8, 18, roundingMode ) ? ROUNDING_MODE : rm | 0;\r\n            return sd ? round( n, sd, rm ) : n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in exponential notation and\r\n         * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toExponential() decimal places not an integer: {dp}'\r\n         * 'toExponential() decimal places out of range: {dp}'\r\n         * 'toExponential() rounding mode not an integer: {rm}'\r\n         * 'toExponential() rounding mode out of range: {rm}'\r\n         */\r\n        P.toExponential = function ( dp, rm ) {\r\n            return format( this,\r\n              dp != null && isValidInt( dp, 0, MAX, 19 ) ? ~~dp + 1 : null, rm, 19 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n         *\r\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n         * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toFixed() decimal places not an integer: {dp}'\r\n         * 'toFixed() decimal places out of range: {dp}'\r\n         * 'toFixed() rounding mode not an integer: {rm}'\r\n         * 'toFixed() rounding mode out of range: {rm}'\r\n         */\r\n        P.toFixed = function ( dp, rm ) {\r\n            return format( this, dp != null && isValidInt( dp, 0, MAX, 20 )\r\n              ? ~~dp + this.e + 1 : null, rm, 20 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n         * of the FORMAT object (see BigNumber.config).\r\n         *\r\n         * FORMAT = {\r\n         *      decimalSeparator : '.',\r\n         *      groupSeparator : ',',\r\n         *      groupSize : 3,\r\n         *      secondaryGroupSize : 0,\r\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n         *      fractionGroupSize : 0\r\n         * };\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toFormat() decimal places not an integer: {dp}'\r\n         * 'toFormat() decimal places out of range: {dp}'\r\n         * 'toFormat() rounding mode not an integer: {rm}'\r\n         * 'toFormat() rounding mode out of range: {rm}'\r\n         */\r\n        P.toFormat = function ( dp, rm ) {\r\n            var str = format( this, dp != null && isValidInt( dp, 0, MAX, 21 )\r\n              ? ~~dp + this.e + 1 : null, rm, 21 );\r\n\r\n            if ( this.c ) {\r\n                var i,\r\n                    arr = str.split('.'),\r\n                    g1 = +FORMAT.groupSize,\r\n                    g2 = +FORMAT.secondaryGroupSize,\r\n                    groupSeparator = FORMAT.groupSeparator,\r\n                    intPart = arr[0],\r\n                    fractionPart = arr[1],\r\n                    isNeg = this.s < 0,\r\n                    intDigits = isNeg ? intPart.slice(1) : intPart,\r\n                    len = intDigits.length;\r\n\r\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n                if ( g1 > 0 && len > 0 ) {\r\n                    i = len % g1 || g1;\r\n                    intPart = intDigits.substr( 0, i );\r\n\r\n                    for ( ; i < len; i += g1 ) {\r\n                        intPart += groupSeparator + intDigits.substr( i, g1 );\r\n                    }\r\n\r\n                    if ( g2 > 0 ) intPart += groupSeparator + intDigits.slice(i);\r\n                    if (isNeg) intPart = '-' + intPart;\r\n                }\r\n\r\n                str = fractionPart\r\n                  ? intPart + FORMAT.decimalSeparator + ( ( g2 = +FORMAT.fractionGroupSize )\r\n                    ? fractionPart.replace( new RegExp( '\\\\d{' + g2 + '}\\\\B', 'g' ),\r\n                      '$&' + FORMAT.fractionGroupSeparator )\r\n                    : fractionPart )\r\n                  : intPart;\r\n            }\r\n\r\n            return str;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string array representing the value of this BigNumber as a simple fraction with\r\n         * an integer numerator and an integer denominator. The denominator will be a positive\r\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n         * denominator is not specified, the denominator will be the lowest value necessary to\r\n         * represent the number exactly.\r\n         *\r\n         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.\r\n         *\r\n         * 'toFraction() max denominator not an integer: {md}'\r\n         * 'toFraction() max denominator out of range: {md}'\r\n         */\r\n        P.toFraction = function (md) {\r\n            var arr, d0, d2, e, exp, n, n0, q, s,\r\n                k = ERRORS,\r\n                x = this,\r\n                xc = x.c,\r\n                d = new BigNumber(ONE),\r\n                n1 = d0 = new BigNumber(ONE),\r\n                d1 = n0 = new BigNumber(ONE);\r\n\r\n            if ( md != null ) {\r\n                ERRORS = false;\r\n                n = new BigNumber(md);\r\n                ERRORS = k;\r\n\r\n                if ( !( k = n.isInt() ) || n.lt(ONE) ) {\r\n\r\n                    if (ERRORS) {\r\n                        raise( 22,\r\n                          'max denominator ' + ( k ? 'out of range' : 'not an integer' ), md );\r\n                    }\r\n\r\n                    // ERRORS is false:\r\n                    // If md is a finite non-integer >= 1, round it to an integer and use it.\r\n                    md = !k && n.c && round( n, n.e + 1, 1 ).gte(ONE) ? n : null;\r\n                }\r\n            }\r\n\r\n            if ( !xc ) return x.toString();\r\n            s = coeffToString(xc);\r\n\r\n            // Determine initial denominator.\r\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n            e = d.e = s.length - x.e - 1;\r\n            d.c[0] = POWS_TEN[ ( exp = e % LOG_BASE ) < 0 ? LOG_BASE + exp : exp ];\r\n            md = !md || n.cmp(d) > 0 ? ( e > 0 ? d : n1 ) : n;\r\n\r\n            exp = MAX_EXP;\r\n            MAX_EXP = 1 / 0;\r\n            n = new BigNumber(s);\r\n\r\n            // n0 = d1 = 0\r\n            n0.c[0] = 0;\r\n\r\n            for ( ; ; )  {\r\n                q = div( n, d, 0, 1 );\r\n                d2 = d0.plus( q.times(d1) );\r\n                if ( d2.cmp(md) == 1 ) break;\r\n                d0 = d1;\r\n                d1 = d2;\r\n                n1 = n0.plus( q.times( d2 = n1 ) );\r\n                n0 = d2;\r\n                d = n.minus( q.times( d2 = d ) );\r\n                n = d2;\r\n            }\r\n\r\n            d2 = div( md.minus(d0), d1, 0, 1 );\r\n            n0 = n0.plus( d2.times(n1) );\r\n            d0 = d0.plus( d2.times(d1) );\r\n            n0.s = n1.s = x.s;\r\n            e *= 2;\r\n\r\n            // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n            arr = div( n1, d1, e, ROUNDING_MODE ).minus(x).abs().cmp(\r\n                  div( n0, d0, e, ROUNDING_MODE ).minus(x).abs() ) < 1\r\n                    ? [ n1.toString(), d1.toString() ]\r\n                    : [ n0.toString(), d0.toString() ];\r\n\r\n            MAX_EXP = exp;\r\n            return arr;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the value of this BigNumber converted to a number primitive.\r\n         */\r\n        P.toNumber = function () {\r\n            var x = this;\r\n\r\n            // Ensure zero has correct sign.\r\n            return +x || ( x.s ? x.s * 0 : NaN );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.\r\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         * If POW_PRECISION is not 0, round to POW_PRECISION using ROUNDING_MODE.\r\n         *\r\n         * n {number} Integer, -9007199254740992 to 9007199254740992 inclusive.\r\n         * (Performs 54 loop iterations for n of 9007199254740992.)\r\n         *\r\n         * 'pow() exponent not an integer: {n}'\r\n         * 'pow() exponent out of range: {n}'\r\n         */\r\n        P.toPower = P.pow = function (n) {\r\n            var k, y,\r\n                i = mathfloor( n < 0 ? -n : +n ),\r\n                x = this;\r\n\r\n            // Pass ±Infinity to Math.pow if exponent is out of range.\r\n            if ( !isValidInt( n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent' ) &&\r\n              ( !isFinite(n) || i > MAX_SAFE_INTEGER && ( n /= 0 ) ||\r\n                parseFloat(n) != n && !( n = NaN ) ) ) {\r\n                return new BigNumber( Math.pow( +x, n ) );\r\n            }\r\n\r\n            // Truncating each coefficient array to a length of k after each multiplication equates\r\n            // to truncating significant digits to POW_PRECISION + [28, 41], i.e. there will be a\r\n            // minimum of 28 guard digits retained. (Using + 1.5 would give [9, 21] guard digits.)\r\n            k = POW_PRECISION ? mathceil( POW_PRECISION / LOG_BASE + 2 ) : 0;\r\n            y = new BigNumber(ONE);\r\n\r\n            for ( ; ; ) {\r\n\r\n                if ( i % 2 ) {\r\n                    y = y.times(x);\r\n                    if ( !y.c ) break;\r\n                    if ( k && y.c.length > k ) y.c.length = k;\r\n                }\r\n\r\n                i = mathfloor( i / 2 );\r\n                if ( !i ) break;\r\n\r\n                x = x.times(x);\r\n                if ( k && x.c && x.c.length > k ) x.c.length = k;\r\n            }\r\n\r\n            if ( n < 0 ) y = ONE.div(y);\r\n            return k ? round( y, POW_PRECISION, ROUNDING_MODE ) : y;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n         * necessary to represent the integer part of the value in fixed-point notation, then use\r\n         * exponential notation.\r\n         *\r\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toPrecision() precision not an integer: {sd}'\r\n         * 'toPrecision() precision out of range: {sd}'\r\n         * 'toPrecision() rounding mode not an integer: {rm}'\r\n         * 'toPrecision() rounding mode out of range: {rm}'\r\n         */\r\n        P.toPrecision = function ( sd, rm ) {\r\n            return format( this, sd != null && isValidInt( sd, 1, MAX, 24, 'precision' )\r\n              ? sd | 0 : null, rm, 24 );\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n         * TO_EXP_NEG, return exponential notation.\r\n         *\r\n         * [b] {number} Integer, 2 to 64 inclusive.\r\n         *\r\n         * 'toString() base not an integer: {b}'\r\n         * 'toString() base out of range: {b}'\r\n         */\r\n        P.toString = function (b) {\r\n            var str,\r\n                n = this,\r\n                s = n.s,\r\n                e = n.e;\r\n\r\n            // Infinity or NaN?\r\n            if ( e === null ) {\r\n\r\n                if (s) {\r\n                    str = 'Infinity';\r\n                    if ( s < 0 ) str = '-' + str;\r\n                } else {\r\n                    str = 'NaN';\r\n                }\r\n            } else {\r\n                str = coeffToString( n.c );\r\n\r\n                if ( b == null || !isValidInt( b, 2, 64, 25, 'base' ) ) {\r\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n                      ? toExponential( str, e )\r\n                      : toFixedPoint( str, e );\r\n                } else {\r\n                    str = convertBase( toFixedPoint( str, e ), b | 0, 10, s );\r\n                }\r\n\r\n                if ( s < 0 && n.c[0] ) str = '-' + str;\r\n            }\r\n\r\n            return str;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole\r\n         * number.\r\n         */\r\n        P.truncated = P.trunc = function () {\r\n            return round( new BigNumber(this), this.e + 1, 1 );\r\n        };\r\n\r\n\r\n\r\n        /*\r\n         * Return as toString, but do not accept a base argument.\r\n         */\r\n        P.valueOf = P.toJSON = function () {\r\n            return this.toString();\r\n        };\r\n\r\n\r\n        // Aliases for BigDecimal methods.\r\n        //P.add = P.plus;         // P.add included above\r\n        //P.subtract = P.minus;   // P.sub included above\r\n        //P.multiply = P.times;   // P.mul included above\r\n        //P.divide = P.div;\r\n        //P.remainder = P.mod;\r\n        //P.compareTo = P.cmp;\r\n        //P.negate = P.neg;\r\n\r\n\r\n        if ( configObj != null ) BigNumber.config(configObj);\r\n\r\n        return BigNumber;\r\n    }\r\n\r\n\r\n    // PRIVATE HELPER FUNCTIONS\r\n\r\n\r\n    function bitFloor(n) {\r\n        var i = n | 0;\r\n        return n > 0 || n === i ? i : i - 1;\r\n    }\r\n\r\n\r\n    // Return a coefficient array as a string of base 10 digits.\r\n    function coeffToString(a) {\r\n        var s, z,\r\n            i = 1,\r\n            j = a.length,\r\n            r = a[0] + '';\r\n\r\n        for ( ; i < j; ) {\r\n            s = a[i++] + '';\r\n            z = LOG_BASE - s.length;\r\n            for ( ; z--; s = '0' + s );\r\n            r += s;\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for ( j = r.length; r.charCodeAt(--j) === 48; );\r\n        return r.slice( 0, j + 1 || 1 );\r\n    }\r\n\r\n\r\n    // Compare the value of BigNumbers x and y.\r\n    function compare( x, y ) {\r\n        var a, b,\r\n            xc = x.c,\r\n            yc = y.c,\r\n            i = x.s,\r\n            j = y.s,\r\n            k = x.e,\r\n            l = y.e;\r\n\r\n        // Either NaN?\r\n        if ( !i || !j ) return null;\r\n\r\n        a = xc && !xc[0];\r\n        b = yc && !yc[0];\r\n\r\n        // Either zero?\r\n        if ( a || b ) return a ? b ? 0 : -j : i;\r\n\r\n        // Signs differ?\r\n        if ( i != j ) return i;\r\n\r\n        a = i < 0;\r\n        b = k == l;\r\n\r\n        // Either Infinity?\r\n        if ( !xc || !yc ) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n        // Compare exponents.\r\n        if ( !b ) return k > l ^ a ? 1 : -1;\r\n\r\n        j = ( k = xc.length ) < ( l = yc.length ) ? k : l;\r\n\r\n        // Compare digit by digit.\r\n        for ( i = 0; i < j; i++ ) if ( xc[i] != yc[i] ) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n        // Compare lengths.\r\n        return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n    }\r\n\r\n\r\n    /*\r\n     * Return true if n is a valid number in range, otherwise false.\r\n     * Use for argument validation when ERRORS is false.\r\n     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.\r\n     */\r\n    function intValidatorNoErrors( n, min, max ) {\r\n        return ( n = truncate(n) ) >= min && n <= max;\r\n    }\r\n\r\n\r\n    function isArray(obj) {\r\n        return Object.prototype.toString.call(obj) == '[object Array]';\r\n    }\r\n\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. convertBase('255', 10, 16) returns [15, 15].\r\n     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut( str, baseIn, baseOut ) {\r\n        var j,\r\n            arr = [0],\r\n            arrL,\r\n            i = 0,\r\n            len = str.length;\r\n\r\n        for ( ; i < len; ) {\r\n            for ( arrL = arr.length; arrL--; arr[arrL] *= baseIn );\r\n            arr[ j = 0 ] += ALPHABET.indexOf( str.charAt( i++ ) );\r\n\r\n            for ( ; j < arr.length; j++ ) {\r\n\r\n                if ( arr[j] > baseOut - 1 ) {\r\n                    if ( arr[j + 1] == null ) arr[j + 1] = 0;\r\n                    arr[j + 1] += arr[j] / baseOut | 0;\r\n                    arr[j] %= baseOut;\r\n                }\r\n            }\r\n        }\r\n\r\n        return arr.reverse();\r\n    }\r\n\r\n\r\n    function toExponential( str, e ) {\r\n        return ( str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str ) +\r\n          ( e < 0 ? 'e' : 'e+' ) + e;\r\n    }\r\n\r\n\r\n    function toFixedPoint( str, e ) {\r\n        var len, z;\r\n\r\n        // Negative exponent?\r\n        if ( e < 0 ) {\r\n\r\n            // Prepend zeros.\r\n            for ( z = '0.'; ++e; z += '0' );\r\n            str = z + str;\r\n\r\n        // Positive exponent\r\n        } else {\r\n            len = str.length;\r\n\r\n            // Append zeros.\r\n            if ( ++e > len ) {\r\n                for ( z = '0', e -= len; --e; z += '0' );\r\n                str += z;\r\n            } else if ( e < len ) {\r\n                str = str.slice( 0, e ) + '.' + str.slice(e);\r\n            }\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n\r\n    function truncate(n) {\r\n        n = parseFloat(n);\r\n        return n < 0 ? mathceil(n) : mathfloor(n);\r\n    }\r\n\r\n\r\n    // EXPORT\r\n\r\n\r\n    BigNumber = another();\r\n\r\n    // AMD.\r\n    if ( typeof define == 'function' && define.amd ) {\r\n        define( function () { return BigNumber; } );\r\n\r\n    // Node and other environments that support module.exports.\r\n    } else if ( typeof module != 'undefined' && module.exports ) {\r\n        module.exports = BigNumber;\r\n        if ( !crypto ) try { crypto = require('crypto'); } catch (e) {}\r\n\r\n    // Browser.\r\n    } else {\r\n        global.BigNumber = BigNumber;\r\n    }\r\n})(this);\r\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file sha3.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar CryptoJS = require('crypto-js');\nvar sha3 = require('crypto-js/sha3');\n\nmodule.exports = function (value, options) {\n    if (options && options.encoding === 'hex') {\n        if (value.length > 2 && value.substr(0, 2) === '0x') {\n            value = value.substr(2);\n        }\n        value = CryptoJS.enc.Hex.parse(value);\n    }\n\n    return sha3(value, {\n        outputLength: 256\n    }).toString();\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file errors.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nmodule.exports = {\n    InvalidNumberOfParams: function () {\n        return new Error('Invalid number of input parameters');\n    },\n    InvalidConnection: function (host){\n        return new Error('CONNECTION ERROR: Couldn\\'t connect to node '+ host +'.');\n    },\n    InvalidProvider: function () {\n        return new Error('Provider not set or invalid');\n    },\n    InvalidResponse: function (result){\n        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);\n        return new Error(message);\n    },\n    ConnectionTimeout: function (ms){\n        return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');\n    }\n};\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file coder.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar f = require('./formatters');\n\nvar SolidityTypeAddress = require('./address');\nvar SolidityTypeBool = require('./bool');\nvar SolidityTypeInt = require('./int');\nvar SolidityTypeUInt = require('./uint');\nvar SolidityTypeDynamicBytes = require('./dynamicbytes');\nvar SolidityTypeString = require('./string');\nvar SolidityTypeReal = require('./real');\nvar SolidityTypeUReal = require('./ureal');\nvar SolidityTypeBytes = require('./bytes');\n\nvar isDynamic = function (solidityType, type) {\n   return solidityType.isDynamicType(type) ||\n          solidityType.isDynamicArray(type);\n};\n\n/**\n * SolidityCoder prototype should be used to encode/decode solidity params of any type\n */\nvar SolidityCoder = function (types) {\n    this._types = types;\n};\n\n/**\n * This method should be used to transform type to SolidityType\n *\n * @method _requireType\n * @param {String} type\n * @returns {SolidityType}\n * @throws {Error} throws if no matching type is found\n */\nSolidityCoder.prototype._requireType = function (type) {\n    var solidityType = this._types.filter(function (t) {\n        return t.isType(type);\n    })[0];\n\n    if (!solidityType) {\n        throw Error('invalid solidity type!: ' + type);\n    }\n\n    return solidityType;\n};\n\n/**\n * Should be used to encode plain param\n *\n * @method encodeParam\n * @param {String} type\n * @param {Object} plain param\n * @return {String} encoded plain param\n */\nSolidityCoder.prototype.encodeParam = function (type, param) {\n    return this.encodeParams([type], [param]);\n};\n\n/**\n * Should be used to encode list of params\n *\n * @method encodeParams\n * @param {Array} types\n * @param {Array} params\n * @return {String} encoded list of params\n */\nSolidityCoder.prototype.encodeParams = function (types, params) {\n    var solidityTypes = this.getSolidityTypes(types);\n\n    var encodeds = solidityTypes.map(function (solidityType, index) {\n        return solidityType.encode(params[index], types[index]);\n    });\n\n    var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {\n        var staticPartLength = solidityType.staticPartLength(types[index]);\n        var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;\n\n        return acc + (isDynamic(solidityTypes[index], types[index]) ?\n            32 :\n            roundedStaticPartLength);\n    }, 0);\n\n    var result = this.encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset);\n\n    return result;\n};\n\nSolidityCoder.prototype.encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {\n    var result = \"\";\n    var self = this;\n\n    types.forEach(function (type, i) {\n        if (isDynamic(solidityTypes[i], types[i])) {\n            result += f.formatInputInt(dynamicOffset).encode();\n            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n            dynamicOffset += e.length / 2;\n        } else {\n            // don't add length to dynamicOffset. it's already counted\n            result += self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n        }\n\n        // TODO: figure out nested arrays\n    });\n\n    types.forEach(function (type, i) {\n        if (isDynamic(solidityTypes[i], types[i])) {\n            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n            dynamicOffset += e.length / 2;\n            result += e;\n        }\n    });\n    return result;\n};\n\n// TODO: refactor whole encoding!\nSolidityCoder.prototype.encodeWithOffset = function (type, solidityType, encoded, offset) {\n    var self = this;\n    if (solidityType.isDynamicArray(type)) {\n        return (function () {\n            // offset was already set\n            var nestedName = solidityType.nestedName(type);\n            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);\n            var result = encoded[0];\n\n            (function () {\n                var previousLength = 2; // in int\n                if (solidityType.isDynamicArray(nestedName)) {\n                    for (var i = 1; i < encoded.length; i++) {\n                        previousLength += +(encoded[i - 1])[0] || 0;\n                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();\n                    }\n                }\n            })();\n\n            // first element is length, skip it\n            (function () {\n                for (var i = 0; i < encoded.length - 1; i++) {\n                    var additionalOffset = result / 2;\n                    result += self.encodeWithOffset(nestedName, solidityType, encoded[i + 1], offset +  additionalOffset);\n                }\n            })();\n\n            return result;\n        })();\n\n    } else if (solidityType.isStaticArray(type)) {\n        return (function () {\n            var nestedName = solidityType.nestedName(type);\n            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);\n            var result = \"\";\n\n\n            if (solidityType.isDynamicArray(nestedName)) {\n                (function () {\n                    var previousLength = 0; // in int\n                    for (var i = 0; i < encoded.length; i++) {\n                        // calculate length of previous item\n                        previousLength += +(encoded[i - 1] || [])[0] || 0;\n                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();\n                    }\n                })();\n            }\n\n            (function () {\n                for (var i = 0; i < encoded.length; i++) {\n                    var additionalOffset = result / 2;\n                    result += self.encodeWithOffset(nestedName, solidityType, encoded[i], offset + additionalOffset);\n                }\n            })();\n\n            return result;\n        })();\n    }\n\n    return encoded;\n};\n\n/**\n * Should be used to decode bytes to plain param\n *\n * @method decodeParam\n * @param {String} type\n * @param {String} bytes\n * @return {Object} plain param\n */\nSolidityCoder.prototype.decodeParam = function (type, bytes) {\n    return this.decodeParams([type], bytes)[0];\n};\n\n/**\n * Should be used to decode list of params\n *\n * @method decodeParam\n * @param {Array} types\n * @param {String} bytes\n * @return {Array} array of plain params\n */\nSolidityCoder.prototype.decodeParams = function (types, bytes) {\n    var solidityTypes = this.getSolidityTypes(types);\n    var offsets = this.getOffsets(types, solidityTypes);\n\n    return solidityTypes.map(function (solidityType, index) {\n        return solidityType.decode(bytes, offsets[index],  types[index], index);\n    });\n};\n\nSolidityCoder.prototype.getOffsets = function (types, solidityTypes) {\n    var lengths =  solidityTypes.map(function (solidityType, index) {\n        return solidityType.staticPartLength(types[index]);\n    });\n\n    for (var i = 1; i < lengths.length; i++) {\n         // sum with length of previous element\n        lengths[i] += lengths[i - 1];\n    }\n\n    return lengths.map(function (length, index) {\n        // remove the current length, so the length is sum of previous elements\n        var staticPartLength = solidityTypes[index].staticPartLength(types[index]);\n        return length - staticPartLength;\n    });\n};\n\nSolidityCoder.prototype.getSolidityTypes = function (types) {\n    var self = this;\n    return types.map(function (type) {\n        return self._requireType(type);\n    });\n};\n\nvar coder = new SolidityCoder([\n    new SolidityTypeAddress(),\n    new SolidityTypeBool(),\n    new SolidityTypeInt(),\n    new SolidityTypeUInt(),\n    new SolidityTypeDynamicBytes(),\n    new SolidityTypeBytes(),\n    new SolidityTypeString(),\n    new SolidityTypeReal(),\n    new SolidityTypeUReal()\n]);\n\nmodule.exports = coder;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file config.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\n/**\n * Utils\n * \n * @module utils\n */\n\n/**\n * Utility functions\n * \n * @class [utils] config\n * @constructor\n */\n\n\n/// required to define ETH_BIGNUMBER_ROUNDING_MODE\nvar BigNumber = require('bignumber.js');\n\nvar ETH_UNITS = [\n    'wei',\n    'kwei',\n    'Mwei',\n    'Gwei',\n    'szabo',\n    'finney',\n    'femtoether',\n    'picoether',\n    'nanoether',\n    'microether',\n    'milliether',\n    'nano',\n    'micro',\n    'milli',\n    'ether',\n    'grand',\n    'Mether',\n    'Gether',\n    'Tether',\n    'Pether',\n    'Eether',\n    'Zether',\n    'Yether',\n    'Nether',\n    'Dether',\n    'Vether',\n    'Uether'\n];\n\nmodule.exports = {\n    ETH_PADDING: 32,\n    ETH_SIGNATURE_LENGTH: 4,\n    ETH_UNITS: ETH_UNITS,\n    ETH_BIGNUMBER_ROUNDING_MODE: { ROUNDING_MODE: BigNumber.ROUND_DOWN },\n    ETH_POLLING_TIMEOUT: 1000/2,\n    defaultBlock: 'latest',\n    defaultAccount: undefined\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file iban.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar BigNumber = require('bignumber.js');\n\nvar padLeft = function (string, bytes) {\n    var result = string;\n    while (result.length < bytes * 2) {\n        result = '0' + result;\n    }\n    return result;\n};\n\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n *\n * @method iso13616Prepare\n * @param {String} iban the IBAN\n * @returns {String} the prepared IBAN\n */\nvar iso13616Prepare = function (iban) {\n    var A = 'A'.charCodeAt(0);\n    var Z = 'Z'.charCodeAt(0);\n\n    iban = iban.toUpperCase();\n    iban = iban.substr(4) + iban.substr(0,4);\n\n    return iban.split('').map(function(n){\n        var code = n.charCodeAt(0);\n        if (code >= A && code <= Z){\n            // A = 10, B = 11, ... Z = 35\n            return code - A + 10;\n        } else {\n            return n;\n        }\n    }).join('');\n};\n\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n *\n * @method mod9710\n * @param {String} iban\n * @returns {Number}\n */\nvar mod9710 = function (iban) {\n    var remainder = iban,\n        block;\n\n    while (remainder.length > 2){\n        block = remainder.slice(0, 9);\n        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\n    }\n\n    return parseInt(remainder, 10) % 97;\n};\n\n/**\n * This prototype should be used to create iban object from iban correct string\n *\n * @param {String} iban\n */\nvar Iban = function (iban) {\n    this._iban = iban;\n};\n\n/**\n * This method should be used to create iban object from ethereum address\n *\n * @method fromAddress\n * @param {String} address\n * @return {Iban} the IBAN object\n */\nIban.fromAddress = function (address) {\n    var asBn = new BigNumber(address, 16);\n    var base36 = asBn.toString(36);\n    var padded = padLeft(base36, 15);\n    return Iban.fromBban(padded.toUpperCase());\n};\n\n/**\n * Convert the passed BBAN to an IBAN for this country specification.\n * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n *\n * @method fromBban\n * @param {String} bban the BBAN to convert to IBAN\n * @returns {Iban} the IBAN object\n */\nIban.fromBban = function (bban) {\n    var countryCode = 'XE';\n\n    var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));\n    var checkDigit = ('0' + (98 - remainder)).slice(-2);\n\n    return new Iban(countryCode + checkDigit + bban);\n};\n\n/**\n * Should be used to create IBAN object for given institution and identifier\n *\n * @method createIndirect\n * @param {Object} options, required options are \"institution\" and \"identifier\"\n * @return {Iban} the IBAN object\n */\nIban.createIndirect = function (options) {\n    return Iban.fromBban('ETH' + options.institution + options.identifier);\n};\n\n/**\n * Thos method should be used to check if given string is valid iban object\n *\n * @method isValid\n * @param {String} iban string\n * @return {Boolean} true if it is valid IBAN\n */\nIban.isValid = function (iban) {\n    var i = new Iban(iban);\n    return i.isValid();\n};\n\n/**\n * Should be called to check if iban is correct\n *\n * @method isValid\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isValid = function () {\n    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&\n        mod9710(iso13616Prepare(this._iban)) === 1;\n};\n\n/**\n * Should be called to check if iban number is direct\n *\n * @method isDirect\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isDirect = function () {\n    return this._iban.length === 34 || this._iban.length === 35;\n};\n\n/**\n * Should be called to check if iban number if indirect\n *\n * @method isIndirect\n * @returns {Boolean} true if it is, otherwise false\n */\nIban.prototype.isIndirect = function () {\n    return this._iban.length === 20;\n};\n\n/**\n * Should be called to get iban checksum\n * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)\n *\n * @method checksum\n * @returns {String} checksum\n */\nIban.prototype.checksum = function () {\n    return this._iban.substr(2, 2);\n};\n\n/**\n * Should be called to get institution identifier\n * eg. XREG\n *\n * @method institution\n * @returns {String} institution identifier\n */\nIban.prototype.institution = function () {\n    return this.isIndirect() ? this._iban.substr(7, 4) : '';\n};\n\n/**\n * Should be called to get client identifier within institution\n * eg. GAVOFYORK\n *\n * @method client\n * @returns {String} client identifier\n */\nIban.prototype.client = function () {\n    return this.isIndirect() ? this._iban.substr(11) : '';\n};\n\n/**\n * Should be called to get client direct address\n *\n * @method address\n * @returns {String} client direct address\n */\nIban.prototype.address = function () {\n    if (this.isDirect()) {\n        var base36 = this._iban.substr(4);\n        var asBn = new BigNumber(base36, 36);\n        return padLeft(asBn.toString(16), 20);\n    } \n\n    return '';\n};\n\nIban.prototype.toString = function () {\n    return this._iban;\n};\n\nmodule.exports = Iban;\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file filter.js\n * @authors:\n *   Jeffrey Wilcke <jeff@ethdev.com>\n *   Marek Kotewicz <marek@ethdev.com>\n *   Marian Oancea <marian@ethdev.com>\n *   Fabian Vogelsteller <fabian@ethdev.com>\n *   Gav Wood <g@ethdev.com>\n * @date 2014\n */\n\nvar formatters = require('./formatters');\nvar utils = require('../utils/utils');\n\n/**\n* Converts a given topic to a hex string, but also allows null values.\n*\n* @param {Mixed} value\n* @return {String}\n*/\nvar toTopic = function(value){\n\n    if(value === null || typeof value === 'undefined')\n        return null;\n\n    value = String(value);\n\n    if(value.indexOf('0x') === 0)\n        return value;\n    else\n        return utils.fromUtf8(value);\n};\n\n/// This method should be called on options object, to verify deprecated properties && lazy load dynamic ones\n/// @param should be string or object\n/// @returns options string or object\nvar getOptions = function (options) {\n\n    if (utils.isString(options)) {\n        return options;\n    }\n\n    options = options || {};\n\n    // make sure topics, get converted to hex\n    options.topics = options.topics || [];\n    options.topics = options.topics.map(function(topic){\n        return (utils.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);\n    });\n\n    return {\n        topics: options.topics,\n        from: options.from,\n        to: options.to,\n        address: options.address,\n        fromBlock: formatters.inputBlockNumberFormatter(options.fromBlock),\n        toBlock: formatters.inputBlockNumberFormatter(options.toBlock)\n    };\n};\n\n/**\nAdds the callback and sets up the methods, to iterate over the results.\n\n@method getLogsAtStart\n@param {Object} self\n@param {funciton}\n*/\nvar getLogsAtStart = function(self, callback){\n    // call getFilterLogs for the first watch callback start\n    if (!utils.isString(self.options)) {\n        self.get(function (err, messages) {\n            // don't send all the responses to all the watches again... just to self one\n            if (err) {\n                callback(err);\n            }\n\n            if(utils.isArray(messages)) {\n                messages.forEach(function (message) {\n                    callback(null, message);\n                });\n            }\n        });\n    }\n};\n\n/**\nAdds the callback and sets up the methods, to iterate over the results.\n\n@method pollFilter\n@param {Object} self\n*/\nvar pollFilter = function(self) {\n\n    var onMessage = function (error, messages) {\n        if (error) {\n            return self.callbacks.forEach(function (callback) {\n                callback(error);\n            });\n        }\n\n        if(utils.isArray(messages)) {\n            messages.forEach(function (message) {\n                message = self.formatter ? self.formatter(message) : message;\n                self.callbacks.forEach(function (callback) {\n                    callback(null, message);\n                });\n            });\n        }\n    };\n\n    self.requestManager.startPolling({\n        method: self.implementation.poll.call,\n        params: [self.filterId],\n    }, self.filterId, onMessage, self.stopWatching.bind(self));\n\n};\n\nvar Filter = function (requestManager, options, methods, formatter, callback, filterCreationErrorCallback) {\n    var self = this;\n    var implementation = {};\n    methods.forEach(function (method) {\n        method.setRequestManager(requestManager);\n        method.attachToObject(implementation);\n    });\n    this.requestManager = requestManager;\n    this.options = getOptions(options);\n    this.implementation = implementation;\n    this.filterId = null;\n    this.callbacks = [];\n    this.getLogsCallbacks = [];\n    this.pollFilters = [];\n    this.formatter = formatter;\n    this.implementation.newFilter(this.options, function(error, id){\n        if(error) {\n            self.callbacks.forEach(function(cb){\n                cb(error);\n            });\n            filterCreationErrorCallback(error);\n        } else {\n            self.filterId = id;\n\n            // check if there are get pending callbacks as a consequence\n            // of calling get() with filterId unassigned.\n            self.getLogsCallbacks.forEach(function (cb){\n                self.get(cb);\n            });\n            self.getLogsCallbacks = [];\n\n            // get filter logs for the already existing watch calls\n            self.callbacks.forEach(function(cb){\n                getLogsAtStart(self, cb);\n            });\n            if(self.callbacks.length > 0)\n                pollFilter(self);\n\n            // start to watch immediately\n            if(typeof callback === 'function') {\n                return self.watch(callback);\n            }\n        }\n    });\n\n    return this;\n};\n\nFilter.prototype.watch = function (callback) {\n    this.callbacks.push(callback);\n\n    if(this.filterId) {\n        getLogsAtStart(this, callback);\n        pollFilter(this);\n    }\n\n    return this;\n};\n\nFilter.prototype.stopWatching = function (callback) {\n    this.requestManager.stopPolling(this.filterId);\n    this.callbacks = [];\n    // remove filter async\n    if (callback) {\n        this.implementation.uninstallFilter(this.filterId, callback);\n    } else {\n        return this.implementation.uninstallFilter(this.filterId);\n    }\n};\n\nFilter.prototype.get = function (callback) {\n    var self = this;\n    if (utils.isFunction(callback)) {\n        if (this.filterId === null) {\n            // If filterId is not set yet, call it back\n            // when newFilter() assigns it.\n            this.getLogsCallbacks.push(callback);\n        } else {\n            this.implementation.getLogs(this.filterId, function(err, res){\n                if (err) {\n                    callback(err);\n                } else {\n                    callback(null, res.map(function (log) {\n                        return self.formatter ? self.formatter(log) : log;\n                    }));\n                }\n            });\n        }\n    } else {\n        if (this.filterId === null) {\n            throw new Error('Filter ID Error: filter().get() can\\'t be chained synchronous, please provide a callback for the get() method.');\n        }\n        var logs = this.implementation.getLogs(this.filterId);\n        return logs.map(function (log) {\n            return self.formatter ? self.formatter(log) : log;\n        });\n    }\n\n    return this;\n};\n\nmodule.exports = Filter;\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file watches.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar Method = require('../method');\n\n/// @returns an array of objects describing web3.eth.filter api methods\nvar eth = function () {\n    var newFilterCall = function (args) {\n        var type = args[0];\n\n        switch(type) {\n            case 'latest':\n                args.shift();\n                this.params = 0;\n                return 'eth_newBlockFilter';\n            case 'pending':\n                args.shift();\n                this.params = 0;\n                return 'eth_newPendingTransactionFilter';\n            default:\n                return 'eth_newFilter';\n        }\n    };\n\n    var newFilter = new Method({\n        name: 'newFilter',\n        call: newFilterCall,\n        params: 1\n    });\n\n    var uninstallFilter = new Method({\n        name: 'uninstallFilter',\n        call: 'eth_uninstallFilter',\n        params: 1\n    });\n\n    var getLogs = new Method({\n        name: 'getLogs',\n        call: 'eth_getFilterLogs',\n        params: 1\n    });\n\n    var poll = new Method({\n        name: 'poll',\n        call: 'eth_getFilterChanges',\n        params: 1\n    });\n\n    return [\n        newFilter,\n        uninstallFilter,\n        getLogs,\n        poll\n    ];\n};\n\n/// @returns an array of objects describing web3.shh.watch api methods\nvar shh = function () {\n    var newFilter = new Method({\n        name: 'newFilter',\n        call: 'shh_newFilter',\n        params: 1\n    });\n\n    var uninstallFilter = new Method({\n        name: 'uninstallFilter',\n        call: 'shh_uninstallFilter',\n        params: 1\n    });\n\n    var getLogs = new Method({\n        name: 'getLogs',\n        call: 'shh_getMessages',\n        params: 1\n    });\n\n    var poll = new Method({\n        name: 'poll',\n        call: 'shh_getFilterChanges',\n        params: 1\n    });\n\n    return [\n        newFilter,\n        uninstallFilter,\n        getLogs,\n        poll\n    ];\n};\n\nmodule.exports = {\n    eth: eth,\n    shh: shh\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file param.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar utils = require('../utils/utils');\n\n/**\n * SolidityParam object prototype.\n * Should be used when encoding, decoding solidity bytes\n */\nvar SolidityParam = function (value, offset) {\n    this.value = value || '';\n    this.offset = offset; // offset in bytes\n};\n\n/**\n * This method should be used to get length of params's dynamic part\n * \n * @method dynamicPartLength\n * @returns {Number} length of dynamic part (in bytes)\n */\nSolidityParam.prototype.dynamicPartLength = function () {\n    return this.dynamicPart().length / 2;\n};\n\n/**\n * This method should be used to create copy of solidity param with different offset\n *\n * @method withOffset\n * @param {Number} offset length in bytes\n * @returns {SolidityParam} new solidity param with applied offset\n */\nSolidityParam.prototype.withOffset = function (offset) {\n    return new SolidityParam(this.value, offset);\n};\n\n/**\n * This method should be used to combine solidity params together\n * eg. when appending an array\n *\n * @method combine\n * @param {SolidityParam} param with which we should combine\n * @param {SolidityParam} result of combination\n */\nSolidityParam.prototype.combine = function (param) {\n    return new SolidityParam(this.value + param.value); \n};\n\n/**\n * This method should be called to check if param has dynamic size.\n * If it has, it returns true, otherwise false\n *\n * @method isDynamic\n * @returns {Boolean}\n */\nSolidityParam.prototype.isDynamic = function () {\n    return this.offset !== undefined;\n};\n\n/**\n * This method should be called to transform offset to bytes\n *\n * @method offsetAsBytes\n * @returns {String} bytes representation of offset\n */\nSolidityParam.prototype.offsetAsBytes = function () {\n    return !this.isDynamic() ? '' : utils.padLeft(utils.toTwosComplement(this.offset).toString(16), 64);\n};\n\n/**\n * This method should be called to get static part of param\n *\n * @method staticPart\n * @returns {String} offset if it is a dynamic param, otherwise value\n */\nSolidityParam.prototype.staticPart = function () {\n    if (!this.isDynamic()) {\n        return this.value; \n    } \n    return this.offsetAsBytes();\n};\n\n/**\n * This method should be called to get dynamic part of param\n *\n * @method dynamicPart\n * @returns {String} returns a value if it is a dynamic param, otherwise empty string\n */\nSolidityParam.prototype.dynamicPart = function () {\n    return this.isDynamic() ? this.value : '';\n};\n\n/**\n * This method should be called to encode param\n *\n * @method encode\n * @returns {String}\n */\nSolidityParam.prototype.encode = function () {\n    return this.staticPart() + this.dynamicPart();\n};\n\n/**\n * This method should be called to encode array of params\n *\n * @method encodeList\n * @param {Array[SolidityParam]} params\n * @returns {String}\n */\nSolidityParam.encodeList = function (params) {\n    \n    // updating offsets\n    var totalOffset = params.length * 32;\n    var offsetParams = params.map(function (param) {\n        if (!param.isDynamic()) {\n            return param;\n        }\n        var offset = totalOffset;\n        totalOffset += param.dynamicPartLength();\n        return param.withOffset(offset);\n    });\n\n    // encode everything!\n    return offsetParams.reduce(function (result, param) {\n        return result + param.dynamicPart();\n    }, offsetParams.reduce(function (result, param) {\n        return result + param.staticPart();\n    }, ''));\n};\n\n\n\nmodule.exports = SolidityParam;\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file jsonrpc.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n *   Aaron Kumavis <aaron@kumavis.me>\n * @date 2015\n */\n\n// Initialize Jsonrpc as a simple object with utility functions.\nvar Jsonrpc = {\n    messageId: 0\n};\n\n/**\n * Should be called to valid json create payload object\n *\n * @method toPayload\n * @param {Function} method of jsonrpc call, required\n * @param {Array} params, an array of method params, optional\n * @returns {Object} valid jsonrpc payload object\n */\nJsonrpc.toPayload = function (method, params) {\n    if (!method)\n        console.error('jsonrpc method should be specified!');\n\n    // advance message ID\n    Jsonrpc.messageId++;\n\n    return {\n        jsonrpc: '2.0',\n        id: Jsonrpc.messageId,\n        method: method,\n        params: params || []\n    };\n};\n\n/**\n * Should be called to check if jsonrpc response is valid\n *\n * @method isValidResponse\n * @param {Object}\n * @returns {Boolean} true if response is valid, otherwise false\n */\nJsonrpc.isValidResponse = function (response) {\n    return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);\n\n    function validateSingleMessage(message){\n      return !!message &&\n        !message.error &&\n        message.jsonrpc === '2.0' &&\n        typeof message.id === 'number' &&\n        message.result !== undefined; // only undefined is not valid json object\n    }\n};\n\n/**\n * Should be called to create batch payload object\n *\n * @method toBatchPayload\n * @param {Array} messages, an array of objects with method (required) and params (optional) fields\n * @returns {Array} batch payload\n */\nJsonrpc.toBatchPayload = function (messages) {\n    return messages.map(function (message) {\n        return Jsonrpc.toPayload(message.method, message.params);\n    });\n};\n\nmodule.exports = Jsonrpc;\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file event.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2014\n */\n\nvar utils = require('../utils/utils');\nvar coder = require('../solidity/coder');\nvar formatters = require('./formatters');\nvar sha3 = require('../utils/sha3');\nvar Filter = require('./filter');\nvar watches = require('./methods/watches');\n\n/**\n * This prototype should be used to create event filters\n */\nvar SolidityEvent = function (requestManager, json, address) {\n    this._requestManager = requestManager;\n    this._params = json.inputs;\n    this._name = utils.transformToFullName(json);\n    this._address = address;\n    this._anonymous = json.anonymous;\n};\n\n/**\n * Should be used to get filtered param types\n *\n * @method types\n * @param {Bool} decide if returned typed should be indexed\n * @return {Array} array of types\n */\nSolidityEvent.prototype.types = function (indexed) {\n    return this._params.filter(function (i) {\n        return i.indexed === indexed;\n    }).map(function (i) {\n        return i.type;\n    });\n};\n\n/**\n * Should be used to get event display name\n *\n * @method displayName\n * @return {String} event display name\n */\nSolidityEvent.prototype.displayName = function () {\n    return utils.extractDisplayName(this._name);\n};\n\n/**\n * Should be used to get event type name\n *\n * @method typeName\n * @return {String} event type name\n */\nSolidityEvent.prototype.typeName = function () {\n    return utils.extractTypeName(this._name);\n};\n\n/**\n * Should be used to get event signature\n *\n * @method signature\n * @return {String} event signature\n */\nSolidityEvent.prototype.signature = function () {\n    return sha3(this._name);\n};\n\n/**\n * Should be used to encode indexed params and options to one final object\n * \n * @method encode\n * @param {Object} indexed\n * @param {Object} options\n * @return {Object} everything combined together and encoded\n */\nSolidityEvent.prototype.encode = function (indexed, options) {\n    indexed = indexed || {};\n    options = options || {};\n    var result = {};\n\n    ['fromBlock', 'toBlock'].filter(function (f) {\n        return options[f] !== undefined;\n    }).forEach(function (f) {\n        result[f] = formatters.inputBlockNumberFormatter(options[f]);\n    });\n\n    result.topics = [];\n\n    result.address = this._address;\n    if (!this._anonymous) {\n        result.topics.push('0x' + this.signature());\n    }\n\n    var indexedTopics = this._params.filter(function (i) {\n        return i.indexed === true;\n    }).map(function (i) {\n        var value = indexed[i.name];\n        if (value === undefined || value === null) {\n            return null;\n        }\n        \n        if (utils.isArray(value)) {\n            return value.map(function (v) {\n                return '0x' + coder.encodeParam(i.type, v);\n            });\n        }\n        return '0x' + coder.encodeParam(i.type, value);\n    });\n\n    result.topics = result.topics.concat(indexedTopics);\n\n    return result;\n};\n\n/**\n * Should be used to decode indexed params and options\n *\n * @method decode\n * @param {Object} data\n * @return {Object} result object with decoded indexed && not indexed params\n */\nSolidityEvent.prototype.decode = function (data) {\n \n    data.data = data.data || '';\n    data.topics = data.topics || [];\n\n    var argTopics = this._anonymous ? data.topics : data.topics.slice(1);\n    var indexedData = argTopics.map(function (topics) { return topics.slice(2); }).join(\"\");\n    var indexedParams = coder.decodeParams(this.types(true), indexedData); \n\n    var notIndexedData = data.data.slice(2);\n    var notIndexedParams = coder.decodeParams(this.types(false), notIndexedData);\n    \n    var result = formatters.outputLogFormatter(data);\n    result.event = this.displayName();\n    result.address = data.address;\n\n    result.args = this._params.reduce(function (acc, current) {\n        acc[current.name] = current.indexed ? indexedParams.shift() : notIndexedParams.shift();\n        return acc;\n    }, {});\n\n    delete result.data;\n    delete result.topics;\n\n    return result;\n};\n\n/**\n * Should be used to create new filter object from event\n *\n * @method execute\n * @param {Object} indexed\n * @param {Object} options\n * @return {Object} filter object\n */\nSolidityEvent.prototype.execute = function (indexed, options, callback) {\n\n    if (utils.isFunction(arguments[arguments.length - 1])) {\n        callback = arguments[arguments.length - 1];\n        if(arguments.length === 2)\n            options = null;\n        if(arguments.length === 1) {\n            options = null;\n            indexed = {};\n        }\n    }\n    \n    var o = this.encode(indexed, options);\n    var formatter = this.decode.bind(this);\n    return new Filter(this._requestManager, o, watches.eth(), formatter, callback);\n};\n\n/**\n * Should be used to attach event to contract object\n *\n * @method attachToContract\n * @param {Contract}\n */\nSolidityEvent.prototype.attachToContract = function (contract) {\n    var execute = this.execute.bind(this);\n    var displayName = this.displayName();\n    if (!contract[displayName]) {\n        contract[displayName] = execute;\n    }\n    contract[displayName][this.typeName()] = this.execute.bind(this, contract);\n};\n\nmodule.exports = SolidityEvent;\n\n","var SolidityCoder = require(\"web3/lib/solidity/coder.js\");\nvar Web3 = require('web3');\n\nvar state = {\n  savedABIs : [],\n  methodIDs: {}\n}\n\nfunction _getABIs() {\n  return state.savedABIs;\n}\n\nfunction _addABI(abiArray) {\n  if (Array.isArray(abiArray)) {\n\n    // Iterate new abi to generate method id's\n    abiArray.map(function (abi) {\n      if(abi.name){\n        var signature = new Web3().sha3(abi.name + \"(\" + abi.inputs.map(function(input) {return input.type;}).join(\",\") + \")\");\n        if(abi.type == \"event\"){\n          state.methodIDs[signature.slice(2)] = abi;\n        }\n        else{\n          state.methodIDs[signature.slice(2, 10)] = abi;\n        }\n      }\n    });\n\n    state.savedABIs = state.savedABIs.concat(abiArray);\n  }\n  else {\n    throw new Error(\"Expected ABI array, got \" + typeof abiArray);\n  }\n}\n\nfunction _removeABI(abiArray) {\n  if (Array.isArray(abiArray)) {\n\n    // Iterate new abi to generate method id's\n    abiArray.map(function (abi) {\n      if(abi.name){\n        var signature = new Web3().sha3(abi.name + \"(\" + abi.inputs.map(function(input) {return input.type;}).join(\",\") + \")\");\n        if(abi.type == \"event\"){\n          if (state.methodIDs[signature.slice(2)]) {\n            delete state.methodIDs[signature.slice(2)];\n          }\n        }\n        else{\n          if (state.methodIDs[signature.slice(2, 10)]) {\n            delete state.methodIDs[signature.slice(2, 10)];\n          }\n        }\n      }\n    });\n  }\n  else {\n    throw new Error(\"Expected ABI array, got \" + typeof abiArray);\n  }\n}\n\nfunction _getMethodIDs() {\n  return state.methodIDs;\n}\n\nfunction _decodeMethod(data) {\n  var methodID = data.slice(2, 10);\n  var abiItem = state.methodIDs[methodID];\n  if (abiItem) {\n    var params = abiItem.inputs.map(function (item) { return item.type; });\n    var decoded = SolidityCoder.decodeParams(params, data.slice(10));\n    return {\n      name: abiItem.name,\n      params: decoded.map(function (param, index) {\n        var parsedParam = param;\n        var isUint = abiItem.inputs[index].type.indexOf(\"uint\") == 0;\n        var isInt = abiItem.inputs[index].type.indexOf(\"int\") == 0;\n\n        if (isUint || isInt) {\n          var isArray = Array.isArray(param);\n\n          if (isArray) {\n            parsedParam = param.map(function(val){new Web3().toBigNumber(val).toString()});\n          } else {\n            parsedParam = new Web3().toBigNumber(param).toString();\n          }\n        }\n        return {\n          name: abiItem.inputs[index].name,\n          value: parsedParam,\n          type: abiItem.inputs[index].type\n        };\n      })\n    }\n  }\n}\n\nfunction padZeros (address) {\n  var formatted = address;\n  if (address.indexOf('0x') != -1) {\n    formatted = address.slice(2);\n  }\n\n  if (formatted.length < 40) {\n    while (formatted.length < 40) formatted = \"0\" + formatted;\n  }\n\n  return \"0x\" + formatted;\n};\n\nfunction _decodeLogs(logs) {\n  return logs.map(function(logItem) {\n    var methodID = logItem.topics[0].slice(2);\n    var method = state.methodIDs[methodID];\n    if (method) {\n      var logData = logItem.data;\n      var decodedParams = [];\n      var dataIndex = 0;\n      var topicsIndex = 1;\n\n      var dataTypes = [];\n      method.inputs.map(\n        function (input) {\n          if (!input.indexed) {\n            dataTypes.push(input.type);\n          }\n        }\n      );\n      var decodedData = SolidityCoder.decodeParams(dataTypes, logData.slice(2));\n      // Loop topic and data to get the params\n      method.inputs.map(function (param) {\n        var decodedP = {\n          name: param.name,\n          type: param.type\n        };\n\n        if (param.indexed) {\n          decodedP.value = logItem.topics[topicsIndex];\n          topicsIndex++;\n        }\n        else {\n          decodedP.value = decodedData[dataIndex];\n          dataIndex++;\n        }\n\n        if (param.type == \"address\"){\n          decodedP.value = padZeros(new Web3().toBigNumber(decodedP.value).toString(16));\n        }\n        else if(param.type == \"uint256\" || param.type == \"uint8\" || param.type == \"int\" ){\n          decodedP.value = new Web3().toBigNumber(decodedP.value).toString(10);\n        }\n\n        decodedParams.push(decodedP);\n      });\n\n\n      return {\n        name: method.name,\n        events: decodedParams,\n        address: logItem.address\n      };\n    }\n  });\n}\n\nmodule.exports = {\n  getABIs: _getABIs,\n  addABI: _addABI,\n  getMethodIDs: _getMethodIDs,\n  decodeMethod: _decodeMethod,\n  decodeLogs: _decodeLogs,\n  removeABI: _removeABI\n};\n","var f = require('./formatters');\nvar SolidityType = require('./type');\n\n/**\n * SolidityTypeAddress is a prootype that represents address type\n * It matches:\n * address\n * address[]\n * address[4]\n * address[][]\n * address[3][]\n * address[][6][], ...\n */\nvar SolidityTypeAddress = function () {\n    this._inputFormatter = f.formatInputInt;\n    this._outputFormatter = f.formatOutputAddress;\n};\n\nSolidityTypeAddress.prototype = new SolidityType({});\nSolidityTypeAddress.prototype.constructor = SolidityTypeAddress;\n\nSolidityTypeAddress.prototype.isType = function (name) {\n    return !!name.match(/address(\\[([0-9]*)\\])?/);\n};\n\nmodule.exports = SolidityTypeAddress;\n","var f = require('./formatters');\nvar SolidityType = require('./type');\n\n/**\n * SolidityTypeBool is a prootype that represents bool type\n * It matches:\n * bool\n * bool[]\n * bool[4]\n * bool[][]\n * bool[3][]\n * bool[][6][], ...\n */\nvar SolidityTypeBool = function () {\n    this._inputFormatter = f.formatInputBool;\n    this._outputFormatter = f.formatOutputBool;\n};\n\nSolidityTypeBool.prototype = new SolidityType({});\nSolidityTypeBool.prototype.constructor = SolidityTypeBool;\n\nSolidityTypeBool.prototype.isType = function (name) {\n    return !!name.match(/^bool(\\[([0-9]*)\\])*$/);\n};\n\nmodule.exports = SolidityTypeBool;\n","var f = require('./formatters');\nvar SolidityType = require('./type');\n\n/**\n * SolidityTypeInt is a prootype that represents int type\n * It matches:\n * int\n * int[]\n * int[4]\n * int[][]\n * int[3][]\n * int[][6][], ...\n * int32\n * int64[]\n * int8[4]\n * int256[][]\n * int[3][]\n * int64[][6][], ...\n */\nvar SolidityTypeInt = function () {\n    this._inputFormatter = f.formatInputInt;\n    this._outputFormatter = f.formatOutputInt;\n};\n\nSolidityTypeInt.prototype = new SolidityType({});\nSolidityTypeInt.prototype.constructor = SolidityTypeInt;\n\nSolidityTypeInt.prototype.isType = function (name) {\n    return !!name.match(/^int([0-9]*)?(\\[([0-9]*)\\])*$/);\n};\n\nmodule.exports = SolidityTypeInt;\n","var f = require('./formatters');\nvar SolidityType = require('./type');\n\n/**\n * SolidityTypeUInt is a prootype that represents uint type\n * It matches:\n * uint\n * uint[]\n * uint[4]\n * uint[][]\n * uint[3][]\n * uint[][6][], ...\n * uint32\n * uint64[]\n * uint8[4]\n * uint256[][]\n * uint[3][]\n * uint64[][6][], ...\n */\nvar SolidityTypeUInt = function () {\n    this._inputFormatter = f.formatInputInt;\n    this._outputFormatter = f.formatOutputUInt;\n};\n\nSolidityTypeUInt.prototype = new SolidityType({});\nSolidityTypeUInt.prototype.constructor = SolidityTypeUInt;\n\nSolidityTypeUInt.prototype.isType = function (name) {\n    return !!name.match(/^uint([0-9]*)?(\\[([0-9]*)\\])*$/);\n};\n\nmodule.exports = SolidityTypeUInt;\n","var f = require('./formatters');\nvar SolidityType = require('./type');\n\nvar SolidityTypeDynamicBytes = function () {\n    this._inputFormatter = f.formatInputDynamicBytes;\n    this._outputFormatter = f.formatOutputDynamicBytes;\n};\n\nSolidityTypeDynamicBytes.prototype = new SolidityType({});\nSolidityTypeDynamicBytes.prototype.constructor = SolidityTypeDynamicBytes;\n\nSolidityTypeDynamicBytes.prototype.isType = function (name) {\n    return !!name.match(/^bytes(\\[([0-9]*)\\])*$/);\n};\n\nSolidityTypeDynamicBytes.prototype.isDynamicType = function () {\n    return true;\n};\n\nmodule.exports = SolidityTypeDynamicBytes;\n","var f = require('./formatters');\nvar SolidityType = require('./type');\n\nvar SolidityTypeString = function () {\n    this._inputFormatter = f.formatInputString;\n    this._outputFormatter = f.formatOutputString;\n};\n\nSolidityTypeString.prototype = new SolidityType({});\nSolidityTypeString.prototype.constructor = SolidityTypeString;\n\nSolidityTypeString.prototype.isType = function (name) {\n    return !!name.match(/^string(\\[([0-9]*)\\])*$/);\n};\n\nSolidityTypeString.prototype.isDynamicType = function () {\n    return true;\n};\n\nmodule.exports = SolidityTypeString;\n","var f = require('./formatters');\nvar SolidityType = require('./type');\n\n/**\n * SolidityTypeReal is a prootype that represents real type\n * It matches:\n * real\n * real[]\n * real[4]\n * real[][]\n * real[3][]\n * real[][6][], ...\n * real32\n * real64[]\n * real8[4]\n * real256[][]\n * real[3][]\n * real64[][6][], ...\n */\nvar SolidityTypeReal = function () {\n    this._inputFormatter = f.formatInputReal;\n    this._outputFormatter = f.formatOutputReal;\n};\n\nSolidityTypeReal.prototype = new SolidityType({});\nSolidityTypeReal.prototype.constructor = SolidityTypeReal;\n\nSolidityTypeReal.prototype.isType = function (name) {\n    return !!name.match(/real([0-9]*)?(\\[([0-9]*)\\])?/);\n};\n\nmodule.exports = SolidityTypeReal;\n","var f = require('./formatters');\nvar SolidityType = require('./type');\n\n/**\n * SolidityTypeUReal is a prootype that represents ureal type\n * It matches:\n * ureal\n * ureal[]\n * ureal[4]\n * ureal[][]\n * ureal[3][]\n * ureal[][6][], ...\n * ureal32\n * ureal64[]\n * ureal8[4]\n * ureal256[][]\n * ureal[3][]\n * ureal64[][6][], ...\n */\nvar SolidityTypeUReal = function () {\n    this._inputFormatter = f.formatInputReal;\n    this._outputFormatter = f.formatOutputUReal;\n};\n\nSolidityTypeUReal.prototype = new SolidityType({});\nSolidityTypeUReal.prototype.constructor = SolidityTypeUReal;\n\nSolidityTypeUReal.prototype.isType = function (name) {\n    return !!name.match(/^ureal([0-9]*)?(\\[([0-9]*)\\])*$/);\n};\n\nmodule.exports = SolidityTypeUReal;\n","var f = require('./formatters');\nvar SolidityType = require('./type');\n\n/**\n * SolidityTypeBytes is a prototype that represents the bytes type.\n * It matches:\n * bytes\n * bytes[]\n * bytes[4]\n * bytes[][]\n * bytes[3][]\n * bytes[][6][], ...\n * bytes32\n * bytes8[4]\n * bytes[3][]\n */\nvar SolidityTypeBytes = function () {\n    this._inputFormatter = f.formatInputBytes;\n    this._outputFormatter = f.formatOutputBytes;\n};\n\nSolidityTypeBytes.prototype = new SolidityType({});\nSolidityTypeBytes.prototype.constructor = SolidityTypeBytes;\n\nSolidityTypeBytes.prototype.isType = function (name) {\n    return !!name.match(/^bytes([0-9]{1,})(\\[([0-9]*)\\])*$/);\n};\n\nmodule.exports = SolidityTypeBytes;\n","var Web3 = require('./lib/web3');\n\n// dont override global variable\nif (typeof window !== 'undefined' && typeof window.Web3 === 'undefined') {\n    window.Web3 = Web3;\n}\n\nmodule.exports = Web3;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file web3.js\n * @authors:\n *   Jeffrey Wilcke <jeff@ethdev.com>\n *   Marek Kotewicz <marek@ethdev.com>\n *   Marian Oancea <marian@ethdev.com>\n *   Fabian Vogelsteller <fabian@ethdev.com>\n *   Gav Wood <g@ethdev.com>\n * @date 2014\n */\n\nvar RequestManager = require('./web3/requestmanager');\nvar Iban = require('./web3/iban');\nvar Eth = require('./web3/methods/eth');\nvar DB = require('./web3/methods/db');\nvar Shh = require('./web3/methods/shh');\nvar Net = require('./web3/methods/net');\nvar Personal = require('./web3/methods/personal');\nvar Swarm = require('./web3/methods/swarm');\nvar Settings = require('./web3/settings');\nvar version = require('./version.json');\nvar utils = require('./utils/utils');\nvar sha3 = require('./utils/sha3');\nvar extend = require('./web3/extend');\nvar Batch = require('./web3/batch');\nvar Property = require('./web3/property');\nvar HttpProvider = require('./web3/httpprovider');\nvar IpcProvider = require('./web3/ipcprovider');\nvar BigNumber = require('bignumber.js');\n\n\n\nfunction Web3 (provider) {\n    this._requestManager = new RequestManager(provider);\n    this.currentProvider = provider;\n    this.eth = new Eth(this);\n    this.db = new DB(this);\n    this.shh = new Shh(this);\n    this.net = new Net(this);\n    this.personal = new Personal(this);\n    this.bzz = new Swarm(this);\n    this.settings = new Settings();\n    this.version = {\n        api: version.version\n    };\n    this.providers = {\n        HttpProvider: HttpProvider,\n        IpcProvider: IpcProvider\n    };\n    this._extend = extend(this);\n    this._extend({\n        properties: properties()\n    });\n}\n\n// expose providers on the class\nWeb3.providers = {\n    HttpProvider: HttpProvider,\n    IpcProvider: IpcProvider\n};\n\nWeb3.prototype.setProvider = function (provider) {\n    this._requestManager.setProvider(provider);\n    this.currentProvider = provider;\n};\n\nWeb3.prototype.reset = function (keepIsSyncing) {\n    this._requestManager.reset(keepIsSyncing);\n    this.settings = new Settings();\n};\n\nWeb3.prototype.BigNumber = BigNumber;\nWeb3.prototype.toHex = utils.toHex;\nWeb3.prototype.toAscii = utils.toAscii;\nWeb3.prototype.toUtf8 = utils.toUtf8;\nWeb3.prototype.fromAscii = utils.fromAscii;\nWeb3.prototype.fromUtf8 = utils.fromUtf8;\nWeb3.prototype.toDecimal = utils.toDecimal;\nWeb3.prototype.fromDecimal = utils.fromDecimal;\nWeb3.prototype.toBigNumber = utils.toBigNumber;\nWeb3.prototype.toWei = utils.toWei;\nWeb3.prototype.fromWei = utils.fromWei;\nWeb3.prototype.isAddress = utils.isAddress;\nWeb3.prototype.isChecksumAddress = utils.isChecksumAddress;\nWeb3.prototype.toChecksumAddress = utils.toChecksumAddress;\nWeb3.prototype.isIBAN = utils.isIBAN;\n\n\nWeb3.prototype.sha3 = function(string, options) {\n    return '0x' + sha3(string, options);\n};\n\n/**\n * Transforms direct icap to address\n */\nWeb3.prototype.fromICAP = function (icap) {\n    var iban = new Iban(icap);\n    return iban.address();\n};\n\nvar properties = function () {\n    return [\n        new Property({\n            name: 'version.node',\n            getter: 'web3_clientVersion'\n        }),\n        new Property({\n            name: 'version.network',\n            getter: 'net_version',\n            inputFormatter: utils.toDecimal\n        }),\n        new Property({\n            name: 'version.ethereum',\n            getter: 'eth_protocolVersion',\n            inputFormatter: utils.toDecimal\n        }),\n        new Property({\n            name: 'version.whisper',\n            getter: 'shh_version',\n            inputFormatter: utils.toDecimal\n        })\n    ];\n};\n\nWeb3.prototype.isConnected = function(){\n    return (this.currentProvider && this.currentProvider.isConnected());\n};\n\nWeb3.prototype.createBatch = function () {\n    return new Batch(this);\n};\n\nmodule.exports = Web3;\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file requestmanager.js\n * @author Jeffrey Wilcke <jeff@ethdev.com>\n * @author Marek Kotewicz <marek@ethdev.com>\n * @author Marian Oancea <marian@ethdev.com>\n * @author Fabian Vogelsteller <fabian@ethdev.com>\n * @author Gav Wood <g@ethdev.com>\n * @date 2014\n */\n\nvar Jsonrpc = require('./jsonrpc');\nvar utils = require('../utils/utils');\nvar c = require('../utils/config');\nvar errors = require('./errors');\n\n/**\n * It's responsible for passing messages to providers\n * It's also responsible for polling the ethereum node for incoming messages\n * Default poll timeout is 1 second\n * Singleton\n */\nvar RequestManager = function (provider) {\n    this.provider = provider;\n    this.polls = {};\n    this.timeout = null;\n};\n\n/**\n * Should be used to synchronously send request\n *\n * @method send\n * @param {Object} data\n * @return {Object}\n */\nRequestManager.prototype.send = function (data) {\n    if (!this.provider) {\n        console.error(errors.InvalidProvider());\n        return null;\n    }\n\n    var payload = Jsonrpc.toPayload(data.method, data.params);\n    var result = this.provider.send(payload);\n\n    if (!Jsonrpc.isValidResponse(result)) {\n        throw errors.InvalidResponse(result);\n    }\n\n    return result.result;\n};\n\n/**\n * Should be used to asynchronously send request\n *\n * @method sendAsync\n * @param {Object} data\n * @param {Function} callback\n */\nRequestManager.prototype.sendAsync = function (data, callback) {\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n\n    var payload = Jsonrpc.toPayload(data.method, data.params);\n    this.provider.sendAsync(payload, function (err, result) {\n        if (err) {\n            return callback(err);\n        }\n        \n        if (!Jsonrpc.isValidResponse(result)) {\n            return callback(errors.InvalidResponse(result));\n        }\n\n        callback(null, result.result);\n    });\n};\n\n/**\n * Should be called to asynchronously send batch request\n *\n * @method sendBatch\n * @param {Array} batch data\n * @param {Function} callback\n */\nRequestManager.prototype.sendBatch = function (data, callback) {\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n\n    var payload = Jsonrpc.toBatchPayload(data);\n\n    this.provider.sendAsync(payload, function (err, results) {\n        if (err) {\n            return callback(err);\n        }\n\n        if (!utils.isArray(results)) {\n            return callback(errors.InvalidResponse(results));\n        }\n\n        callback(err, results);\n    }); \n};\n\n/**\n * Should be used to set provider of request manager\n *\n * @method setProvider\n * @param {Object}\n */\nRequestManager.prototype.setProvider = function (p) {\n    this.provider = p;\n};\n\n/**\n * Should be used to start polling\n *\n * @method startPolling\n * @param {Object} data\n * @param {Number} pollId\n * @param {Function} callback\n * @param {Function} uninstall\n *\n * @todo cleanup number of params\n */\nRequestManager.prototype.startPolling = function (data, pollId, callback, uninstall) {\n    this.polls[pollId] = {data: data, id: pollId, callback: callback, uninstall: uninstall};\n\n\n    // start polling\n    if (!this.timeout) {\n        this.poll();\n    }\n};\n\n/**\n * Should be used to stop polling for filter with given id\n *\n * @method stopPolling\n * @param {Number} pollId\n */\nRequestManager.prototype.stopPolling = function (pollId) {\n    delete this.polls[pollId];\n\n    // stop polling\n    if(Object.keys(this.polls).length === 0 && this.timeout) {\n        clearTimeout(this.timeout);\n        this.timeout = null;\n    }\n};\n\n/**\n * Should be called to reset the polling mechanism of the request manager\n *\n * @method reset\n */\nRequestManager.prototype.reset = function (keepIsSyncing) {\n    /*jshint maxcomplexity:5 */\n\n    for (var key in this.polls) {\n        // remove all polls, except sync polls,\n        // they need to be removed manually by calling syncing.stopWatching()\n        if(!keepIsSyncing || key.indexOf('syncPoll_') === -1) {\n            this.polls[key].uninstall();\n            delete this.polls[key];\n        }\n    }\n\n    // stop polling\n    if(Object.keys(this.polls).length === 0 && this.timeout) {\n        clearTimeout(this.timeout);\n        this.timeout = null;\n    }\n};\n\n/**\n * Should be called to poll for changes on filter with given id\n *\n * @method poll\n */\nRequestManager.prototype.poll = function () {\n    /*jshint maxcomplexity: 6 */\n    this.timeout = setTimeout(this.poll.bind(this), c.ETH_POLLING_TIMEOUT);\n\n    if (Object.keys(this.polls).length === 0) {\n        return;\n    }\n\n    if (!this.provider) {\n        console.error(errors.InvalidProvider());\n        return;\n    }\n\n    var pollsData = [];\n    var pollsIds = [];\n    for (var key in this.polls) {\n        pollsData.push(this.polls[key].data);\n        pollsIds.push(key);\n    }\n\n    if (pollsData.length === 0) {\n        return;\n    }\n\n    var payload = Jsonrpc.toBatchPayload(pollsData);\n    \n    // map the request id to they poll id\n    var pollsIdMap = {};\n    payload.forEach(function(load, index){\n        pollsIdMap[load.id] = pollsIds[index];\n    });\n\n\n    var self = this;\n    this.provider.sendAsync(payload, function (error, results) {\n\n\n        // TODO: console log?\n        if (error) {\n            return;\n        }\n\n        if (!utils.isArray(results)) {\n            throw errors.InvalidResponse(results);\n        }\n        results.map(function (result) {\n            var id = pollsIdMap[result.id];\n\n            // make sure the filter is still installed after arrival of the request\n            if (self.polls[id]) {\n                result.callback = self.polls[id].callback;\n                return result;\n            } else\n                return false;\n        }).filter(function (result) {\n            return !!result; \n        }).filter(function (result) {\n            var valid = Jsonrpc.isValidResponse(result);\n            if (!valid) {\n                result.callback(errors.InvalidResponse(result));\n            }\n            return valid;\n        }).forEach(function (result) {\n            result.callback(null, result.result);\n        });\n    });\n};\n\nmodule.exports = RequestManager;\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file eth.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @author Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n\n\"use strict\";\n\nvar formatters = require('../formatters');\nvar utils = require('../../utils/utils');\nvar Method = require('../method');\nvar Property = require('../property');\nvar c = require('../../utils/config');\nvar Contract = require('../contract');\nvar watches = require('./watches');\nvar Filter = require('../filter');\nvar IsSyncing = require('../syncing');\nvar namereg = require('../namereg');\nvar Iban = require('../iban');\nvar transfer = require('../transfer');\n\nvar blockCall = function (args) {\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? \"eth_getBlockByHash\" : \"eth_getBlockByNumber\";\n};\n\nvar transactionFromBlockCall = function (args) {\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';\n};\n\nvar uncleCall = function (args) {\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';\n};\n\nvar getBlockTransactionCountCall = function (args) {\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';\n};\n\nvar uncleCountCall = function (args) {\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';\n};\n\nfunction Eth(web3) {\n    this._requestManager = web3._requestManager;\n\n    var self = this;\n\n    methods().forEach(function(method) {\n        method.attachToObject(self);\n        method.setRequestManager(self._requestManager);\n    });\n\n    properties().forEach(function(p) {\n        p.attachToObject(self);\n        p.setRequestManager(self._requestManager);\n    });\n\n\n    this.iban = Iban;\n    this.sendIBANTransaction = transfer.bind(null, this);\n}\n\nObject.defineProperty(Eth.prototype, 'defaultBlock', {\n    get: function () {\n        return c.defaultBlock;\n    },\n    set: function (val) {\n        c.defaultBlock = val;\n        return val;\n    }\n});\n\nObject.defineProperty(Eth.prototype, 'defaultAccount', {\n    get: function () {\n        return c.defaultAccount;\n    },\n    set: function (val) {\n        c.defaultAccount = val;\n        return val;\n    }\n});\n\nvar methods = function () {\n    var getBalance = new Method({\n        name: 'getBalance',\n        call: 'eth_getBalance',\n        params: 2,\n        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],\n        outputFormatter: formatters.outputBigNumberFormatter\n    });\n\n    var getStorageAt = new Method({\n        name: 'getStorageAt',\n        call: 'eth_getStorageAt',\n        params: 3,\n        inputFormatter: [null, utils.toHex, formatters.inputDefaultBlockNumberFormatter]\n    });\n\n    var getCode = new Method({\n        name: 'getCode',\n        call: 'eth_getCode',\n        params: 2,\n        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n    });\n\n    var getBlock = new Method({\n        name: 'getBlock',\n        call: blockCall,\n        params: 2,\n        inputFormatter: [formatters.inputBlockNumberFormatter, function (val) { return !!val; }],\n        outputFormatter: formatters.outputBlockFormatter\n    });\n\n    var getUncle = new Method({\n        name: 'getUncle',\n        call: uncleCall,\n        params: 2,\n        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],\n        outputFormatter: formatters.outputBlockFormatter,\n\n    });\n\n    var getCompilers = new Method({\n        name: 'getCompilers',\n        call: 'eth_getCompilers',\n        params: 0\n    });\n\n    var getBlockTransactionCount = new Method({\n        name: 'getBlockTransactionCount',\n        call: getBlockTransactionCountCall,\n        params: 1,\n        inputFormatter: [formatters.inputBlockNumberFormatter],\n        outputFormatter: utils.toDecimal\n    });\n\n    var getBlockUncleCount = new Method({\n        name: 'getBlockUncleCount',\n        call: uncleCountCall,\n        params: 1,\n        inputFormatter: [formatters.inputBlockNumberFormatter],\n        outputFormatter: utils.toDecimal\n    });\n\n    var getTransaction = new Method({\n        name: 'getTransaction',\n        call: 'eth_getTransactionByHash',\n        params: 1,\n        outputFormatter: formatters.outputTransactionFormatter\n    });\n\n    var getTransactionFromBlock = new Method({\n        name: 'getTransactionFromBlock',\n        call: transactionFromBlockCall,\n        params: 2,\n        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],\n        outputFormatter: formatters.outputTransactionFormatter\n    });\n\n    var getTransactionReceipt = new Method({\n        name: 'getTransactionReceipt',\n        call: 'eth_getTransactionReceipt',\n        params: 1,\n        outputFormatter: formatters.outputTransactionReceiptFormatter\n    });\n\n    var getTransactionCount = new Method({\n        name: 'getTransactionCount',\n        call: 'eth_getTransactionCount',\n        params: 2,\n        inputFormatter: [null, formatters.inputDefaultBlockNumberFormatter],\n        outputFormatter: utils.toDecimal\n    });\n\n    var sendRawTransaction = new Method({\n        name: 'sendRawTransaction',\n        call: 'eth_sendRawTransaction',\n        params: 1,\n        inputFormatter: [null]\n    });\n\n    var sendTransaction = new Method({\n        name: 'sendTransaction',\n        call: 'eth_sendTransaction',\n        params: 1,\n        inputFormatter: [formatters.inputTransactionFormatter]\n    });\n\n    var signTransaction = new Method({\n        name: 'signTransaction',\n        call: 'eth_signTransaction',\n        params: 1,\n        inputFormatter: [formatters.inputTransactionFormatter]\n    });\n\n    var sign = new Method({\n        name: 'sign',\n        call: 'eth_sign',\n        params: 2,\n        inputFormatter: [formatters.inputAddressFormatter, null]\n    });\n\n    var call = new Method({\n        name: 'call',\n        call: 'eth_call',\n        params: 2,\n        inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter]\n    });\n\n    var estimateGas = new Method({\n        name: 'estimateGas',\n        call: 'eth_estimateGas',\n        params: 1,\n        inputFormatter: [formatters.inputCallFormatter],\n        outputFormatter: utils.toDecimal\n    });\n\n    var compileSolidity = new Method({\n        name: 'compile.solidity',\n        call: 'eth_compileSolidity',\n        params: 1\n    });\n\n    var compileLLL = new Method({\n        name: 'compile.lll',\n        call: 'eth_compileLLL',\n        params: 1\n    });\n\n    var compileSerpent = new Method({\n        name: 'compile.serpent',\n        call: 'eth_compileSerpent',\n        params: 1\n    });\n\n    var submitWork = new Method({\n        name: 'submitWork',\n        call: 'eth_submitWork',\n        params: 3\n    });\n\n    var getWork = new Method({\n        name: 'getWork',\n        call: 'eth_getWork',\n        params: 0\n    });\n\n    return [\n        getBalance,\n        getStorageAt,\n        getCode,\n        getBlock,\n        getUncle,\n        getCompilers,\n        getBlockTransactionCount,\n        getBlockUncleCount,\n        getTransaction,\n        getTransactionFromBlock,\n        getTransactionReceipt,\n        getTransactionCount,\n        call,\n        estimateGas,\n        sendRawTransaction,\n        signTransaction,\n        sendTransaction,\n        sign,\n        compileSolidity,\n        compileLLL,\n        compileSerpent,\n        submitWork,\n        getWork\n    ];\n};\n\n\nvar properties = function () {\n    return [\n        new Property({\n            name: 'coinbase',\n            getter: 'eth_coinbase'\n        }),\n        new Property({\n            name: 'mining',\n            getter: 'eth_mining'\n        }),\n        new Property({\n            name: 'hashrate',\n            getter: 'eth_hashrate',\n            outputFormatter: utils.toDecimal\n        }),\n        new Property({\n            name: 'syncing',\n            getter: 'eth_syncing',\n            outputFormatter: formatters.outputSyncingFormatter\n        }),\n        new Property({\n            name: 'gasPrice',\n            getter: 'eth_gasPrice',\n            outputFormatter: formatters.outputBigNumberFormatter\n        }),\n        new Property({\n            name: 'accounts',\n            getter: 'eth_accounts'\n        }),\n        new Property({\n            name: 'blockNumber',\n            getter: 'eth_blockNumber',\n            outputFormatter: utils.toDecimal\n        }),\n        new Property({\n            name: 'protocolVersion',\n            getter: 'eth_protocolVersion'\n        })\n    ];\n};\n\nEth.prototype.contract = function (abi) {\n    var factory = new Contract(this, abi);\n    return factory;\n};\n\nEth.prototype.filter = function (fil, callback) {\n    return new Filter(this._requestManager, fil, watches.eth(), formatters.outputLogFormatter, callback);\n};\n\nEth.prototype.namereg = function () {\n    return this.contract(namereg.global.abi).at(namereg.global.address);\n};\n\nEth.prototype.icapNamereg = function () {\n    return this.contract(namereg.icap.abi).at(namereg.icap.address);\n};\n\nEth.prototype.isSyncing = function (callback) {\n    return new IsSyncing(this._requestManager, callback);\n};\n\nmodule.exports = Eth;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file contract.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2014\n */\n\nvar utils = require('../utils/utils');\nvar coder = require('../solidity/coder');\nvar SolidityEvent = require('./event');\nvar SolidityFunction = require('./function');\nvar AllEvents = require('./allevents');\n\n/**\n * Should be called to encode constructor params\n *\n * @method encodeConstructorParams\n * @param {Array} abi\n * @param {Array} constructor params\n */\nvar encodeConstructorParams = function (abi, params) {\n    return abi.filter(function (json) {\n        return json.type === 'constructor' && json.inputs.length === params.length;\n    }).map(function (json) {\n        return json.inputs.map(function (input) {\n            return input.type;\n        });\n    }).map(function (types) {\n        return coder.encodeParams(types, params);\n    })[0] || '';\n};\n\n/**\n * Should be called to add functions to contract object\n *\n * @method addFunctionsToContract\n * @param {Contract} contract\n * @param {Array} abi\n */\nvar addFunctionsToContract = function (contract) {\n    contract.abi.filter(function (json) {\n        return json.type === 'function';\n    }).map(function (json) {\n        return new SolidityFunction(contract._eth, json, contract.address);\n    }).forEach(function (f) {\n        f.attachToContract(contract);\n    });\n};\n\n/**\n * Should be called to add events to contract object\n *\n * @method addEventsToContract\n * @param {Contract} contract\n * @param {Array} abi\n */\nvar addEventsToContract = function (contract) {\n    var events = contract.abi.filter(function (json) {\n        return json.type === 'event';\n    });\n\n    var All = new AllEvents(contract._eth._requestManager, events, contract.address);\n    All.attachToContract(contract);\n\n    events.map(function (json) {\n        return new SolidityEvent(contract._eth._requestManager, json, contract.address);\n    }).forEach(function (e) {\n        e.attachToContract(contract);\n    });\n};\n\n\n/**\n * Should be called to check if the contract gets properly deployed on the blockchain.\n *\n * @method checkForContractAddress\n * @param {Object} contract\n * @param {Function} callback\n * @returns {Undefined}\n */\nvar checkForContractAddress = function(contract, callback){\n    var count = 0,\n        callbackFired = false;\n\n    // wait for receipt\n    var filter = contract._eth.filter('latest', function(e){\n        if (!e && !callbackFired) {\n            count++;\n\n            // stop watching after 50 blocks (timeout)\n            if (count > 50) {\n\n                filter.stopWatching(function() {});\n                callbackFired = true;\n\n                if (callback)\n                    callback(new Error('Contract transaction couldn\\'t be found after 50 blocks'));\n                else\n                    throw new Error('Contract transaction couldn\\'t be found after 50 blocks');\n\n\n            } else {\n\n                contract._eth.getTransactionReceipt(contract.transactionHash, function(e, receipt){\n                    if(receipt && !callbackFired) {\n\n                        contract._eth.getCode(receipt.contractAddress, function(e, code){\n                            /*jshint maxcomplexity: 6 */\n\n                            if(callbackFired || !code)\n                                return;\n\n                            filter.stopWatching(function() {});\n                            callbackFired = true;\n\n                            if(code.length > 3) {\n\n                                // console.log('Contract code deployed!');\n\n                                contract.address = receipt.contractAddress;\n\n                                // attach events and methods again after we have\n                                addFunctionsToContract(contract);\n                                addEventsToContract(contract);\n\n                                // call callback for the second time\n                                if(callback)\n                                    callback(null, contract);\n\n                            } else {\n                                if(callback)\n                                    callback(new Error('The contract code couldn\\'t be stored, please check your gas amount.'));\n                                else\n                                    throw new Error('The contract code couldn\\'t be stored, please check your gas amount.');\n                            }\n                        });\n                    }\n                });\n            }\n        }\n    });\n};\n\n/**\n * Should be called to create new ContractFactory instance\n *\n * @method ContractFactory\n * @param {Array} abi\n */\nvar ContractFactory = function (eth, abi) {\n    this.eth = eth;\n    this.abi = abi;\n\n    /**\n     * Should be called to create new contract on a blockchain\n     *\n     * @method new\n     * @param {Any} contract constructor param1 (optional)\n     * @param {Any} contract constructor param2 (optional)\n     * @param {Object} contract transaction object (required)\n     * @param {Function} callback\n     * @returns {Contract} returns contract instance\n     */\n    this.new = function () {\n        /*jshint maxcomplexity: 7 */\n        \n        var contract = new Contract(this.eth, this.abi);\n\n        // parse arguments\n        var options = {}; // required!\n        var callback;\n\n        var args = Array.prototype.slice.call(arguments);\n        if (utils.isFunction(args[args.length - 1])) {\n            callback = args.pop();\n        }\n\n        var last = args[args.length - 1];\n        if (utils.isObject(last) && !utils.isArray(last)) {\n            options = args.pop();\n        }\n\n        if (options.value > 0) {\n            var constructorAbi = abi.filter(function (json) {\n                return json.type === 'constructor' && json.inputs.length === args.length;\n            })[0] || {};\n\n            if (!constructorAbi.payable) {\n                throw new Error('Cannot send value to non-payable constructor');\n            }\n        }\n\n        var bytes = encodeConstructorParams(this.abi, args);\n        options.data += bytes;\n\n        if (callback) {\n\n            // wait for the contract address adn check if the code was deployed\n            this.eth.sendTransaction(options, function (err, hash) {\n                if (err) {\n                    callback(err);\n                } else {\n                    // add the transaction hash\n                    contract.transactionHash = hash;\n\n                    // call callback for the first time\n                    callback(null, contract);\n\n                    checkForContractAddress(contract, callback);\n                }\n            });\n        } else {\n            var hash = this.eth.sendTransaction(options);\n            // add the transaction hash\n            contract.transactionHash = hash;\n            checkForContractAddress(contract);\n        }\n\n        return contract;\n    };\n\n    this.new.getData = this.getData.bind(this);\n};\n\n/**\n * Should be called to create new ContractFactory\n *\n * @method contract\n * @param {Array} abi\n * @returns {ContractFactory} new contract factory\n */\n//var contract = function (abi) {\n    //return new ContractFactory(abi);\n//};\n\n\n\n/**\n * Should be called to get access to existing contract on a blockchain\n *\n * @method at\n * @param {Address} contract address (required)\n * @param {Function} callback {optional)\n * @returns {Contract} returns contract if no callback was passed,\n * otherwise calls callback function (err, contract)\n */\nContractFactory.prototype.at = function (address, callback) {\n    var contract = new Contract(this.eth, this.abi, address);\n\n    // this functions are not part of prototype,\n    // because we dont want to spoil the interface\n    addFunctionsToContract(contract);\n    addEventsToContract(contract);\n\n    if (callback) {\n        callback(null, contract);\n    }\n    return contract;\n};\n\n/**\n * Gets the data, which is data to deploy plus constructor params\n *\n * @method getData\n */\nContractFactory.prototype.getData = function () {\n    var options = {}; // required!\n    var args = Array.prototype.slice.call(arguments);\n\n    var last = args[args.length - 1];\n    if (utils.isObject(last) && !utils.isArray(last)) {\n        options = args.pop();\n    }\n\n    var bytes = encodeConstructorParams(this.abi, args);\n    options.data += bytes;\n\n    return options.data;\n};\n\n/**\n * Should be called to create new contract instance\n *\n * @method Contract\n * @param {Array} abi\n * @param {Address} contract address\n */\nvar Contract = function (eth, abi, address) {\n    this._eth = eth;\n    this.transactionHash = null;\n    this.address = address;\n    this.abi = abi;\n};\n\nmodule.exports = ContractFactory;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file function.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar coder = require('../solidity/coder');\nvar utils = require('../utils/utils');\nvar formatters = require('./formatters');\nvar sha3 = require('../utils/sha3');\n\n/**\n * This prototype should be used to call/sendTransaction to solidity functions\n */\nvar SolidityFunction = function (eth, json, address) {\n    this._eth = eth;\n    this._inputTypes = json.inputs.map(function (i) {\n        return i.type;\n    });\n    this._outputTypes = json.outputs.map(function (i) {\n        return i.type;\n    });\n    this._constant = json.constant;\n    this._payable = json.payable;\n    this._name = utils.transformToFullName(json);\n    this._address = address;\n};\n\nSolidityFunction.prototype.extractCallback = function (args) {\n    if (utils.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n\nSolidityFunction.prototype.extractDefaultBlock = function (args) {\n    if (args.length > this._inputTypes.length && !utils.isObject(args[args.length -1])) {\n        return formatters.inputDefaultBlockNumberFormatter(args.pop()); // modify the args array!\n    }\n};\n\n/**\n * Should be used to create payload from arguments\n *\n * @method toPayload\n * @param {Array} solidity function params\n * @param {Object} optional payload options\n */\nSolidityFunction.prototype.toPayload = function (args) {\n    var options = {};\n    if (args.length > this._inputTypes.length && utils.isObject(args[args.length -1])) {\n        options = args[args.length - 1];\n    }\n    options.to = this._address;\n    options.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args);\n    return options;\n};\n\n/**\n * Should be used to get function signature\n *\n * @method signature\n * @return {String} function signature\n */\nSolidityFunction.prototype.signature = function () {\n    return sha3(this._name).slice(0, 8);\n};\n\n\nSolidityFunction.prototype.unpackOutput = function (output) {\n    if (!output) {\n        return;\n    }\n\n    output = output.length >= 2 ? output.slice(2) : output;\n    var result = coder.decodeParams(this._outputTypes, output);\n    return result.length === 1 ? result[0] : result;\n};\n\n/**\n * Calls a contract function.\n *\n * @method call\n * @param {...Object} Contract function arguments\n * @param {function} If the last argument is a function, the contract function\n *   call will be asynchronous, and the callback will be passed the\n *   error and result.\n * @return {String} output bytes\n */\nSolidityFunction.prototype.call = function () {\n    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });\n    var callback = this.extractCallback(args);\n    var defaultBlock = this.extractDefaultBlock(args);\n    var payload = this.toPayload(args);\n\n\n    if (!callback) {\n        var output = this._eth.call(payload, defaultBlock);\n        return this.unpackOutput(output);\n    }\n\n    var self = this;\n    this._eth.call(payload, defaultBlock, function (error, output) {\n        if (error) return callback(error, null);\n\n        var unpacked = null;\n        try {\n            unpacked = self.unpackOutput(output);\n        }\n        catch (e) {\n            error = e;\n        }\n\n        callback(error, unpacked);\n    });\n};\n\n/**\n * Should be used to sendTransaction to solidity function\n *\n * @method sendTransaction\n */\nSolidityFunction.prototype.sendTransaction = function () {\n    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });\n    var callback = this.extractCallback(args);\n    var payload = this.toPayload(args);\n\n    if (payload.value > 0 && !this._payable) {\n        throw new Error('Cannot send value to non-payable function');\n    }\n\n    if (!callback) {\n        return this._eth.sendTransaction(payload);\n    }\n\n    this._eth.sendTransaction(payload, callback);\n};\n\n/**\n * Should be used to estimateGas of solidity function\n *\n * @method estimateGas\n */\nSolidityFunction.prototype.estimateGas = function () {\n    var args = Array.prototype.slice.call(arguments);\n    var callback = this.extractCallback(args);\n    var payload = this.toPayload(args);\n\n    if (!callback) {\n        return this._eth.estimateGas(payload);\n    }\n\n    this._eth.estimateGas(payload, callback);\n};\n\n/**\n * Return the encoded data of the call\n *\n * @method getData\n * @return {String} the encoded data\n */\nSolidityFunction.prototype.getData = function () {\n    var args = Array.prototype.slice.call(arguments);\n    var payload = this.toPayload(args);\n\n    return payload.data;\n};\n\n/**\n * Should be used to get function display name\n *\n * @method displayName\n * @return {String} display name of the function\n */\nSolidityFunction.prototype.displayName = function () {\n    return utils.extractDisplayName(this._name);\n};\n\n/**\n * Should be used to get function type name\n *\n * @method typeName\n * @return {String} type name of the function\n */\nSolidityFunction.prototype.typeName = function () {\n    return utils.extractTypeName(this._name);\n};\n\n/**\n * Should be called to get rpc requests from solidity function\n *\n * @method request\n * @returns {Object}\n */\nSolidityFunction.prototype.request = function () {\n    var args = Array.prototype.slice.call(arguments);\n    var callback = this.extractCallback(args);\n    var payload = this.toPayload(args);\n    var format = this.unpackOutput.bind(this);\n\n    return {\n        method: this._constant ? 'eth_call' : 'eth_sendTransaction',\n        callback: callback,\n        params: [payload],\n        format: format\n    };\n};\n\n/**\n * Should be called to execute function\n *\n * @method execute\n */\nSolidityFunction.prototype.execute = function () {\n    var transaction = !this._constant;\n\n    // send transaction\n    if (transaction) {\n        return this.sendTransaction.apply(this, Array.prototype.slice.call(arguments));\n    }\n\n    // call\n    return this.call.apply(this, Array.prototype.slice.call(arguments));\n};\n\n/**\n * Should be called to attach function to contract\n *\n * @method attachToContract\n * @param {Contract}\n */\nSolidityFunction.prototype.attachToContract = function (contract) {\n    var execute = this.execute.bind(this);\n    execute.request = this.request.bind(this);\n    execute.call = this.call.bind(this);\n    execute.sendTransaction = this.sendTransaction.bind(this);\n    execute.estimateGas = this.estimateGas.bind(this);\n    execute.getData = this.getData.bind(this);\n    var displayName = this.displayName();\n    if (!contract[displayName]) {\n        contract[displayName] = execute;\n    }\n    contract[displayName][this.typeName()] = execute; // circular!!!!\n};\n\nmodule.exports = SolidityFunction;\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file allevents.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2014\n */\n\nvar sha3 = require('../utils/sha3');\nvar SolidityEvent = require('./event');\nvar formatters = require('./formatters');\nvar utils = require('../utils/utils');\nvar Filter = require('./filter');\nvar watches = require('./methods/watches');\n\nvar AllSolidityEvents = function (requestManager, json, address) {\n    this._requestManager = requestManager;\n    this._json = json;\n    this._address = address;\n};\n\nAllSolidityEvents.prototype.encode = function (options) {\n    options = options || {};\n    var result = {};\n\n    ['fromBlock', 'toBlock'].filter(function (f) {\n        return options[f] !== undefined;\n    }).forEach(function (f) {\n        result[f] = formatters.inputBlockNumberFormatter(options[f]);\n    });\n\n    result.address = this._address;\n\n    return result;\n};\n\nAllSolidityEvents.prototype.decode = function (data) {\n    data.data = data.data || '';\n    data.topics = data.topics || [];\n\n    var eventTopic = data.topics[0].slice(2);\n    var match = this._json.filter(function (j) {\n        return eventTopic === sha3(utils.transformToFullName(j));\n    })[0];\n\n    if (!match) { // cannot find matching event?\n        console.warn('cannot find event for log');\n        return data;\n    }\n\n    var event = new SolidityEvent(this._requestManager, match, this._address);\n    return event.decode(data);\n};\n\nAllSolidityEvents.prototype.execute = function (options, callback) {\n\n    if (utils.isFunction(arguments[arguments.length - 1])) {\n        callback = arguments[arguments.length - 1];\n        if(arguments.length === 1)\n            options = null;\n    }\n\n    var o = this.encode(options);\n    var formatter = this.decode.bind(this);\n    return new Filter(this._requestManager, o, watches.eth(), formatter, callback);\n};\n\nAllSolidityEvents.prototype.attachToContract = function (contract) {\n    var execute = this.execute.bind(this);\n    contract.allEvents = execute;\n};\n\nmodule.exports = AllSolidityEvents;\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file syncing.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n\nvar formatters = require('./formatters');\nvar utils = require('../utils/utils');\n\nvar count = 1;\n\n/**\nAdds the callback and sets up the methods, to iterate over the results.\n\n@method pollSyncing\n@param {Object} self\n*/\nvar pollSyncing = function(self) {\n\n    var onMessage = function (error, sync) {\n        if (error) {\n            return self.callbacks.forEach(function (callback) {\n                callback(error);\n            });\n        }\n\n        if(utils.isObject(sync) && sync.startingBlock)\n            sync = formatters.outputSyncingFormatter(sync);\n\n        self.callbacks.forEach(function (callback) {\n            if (self.lastSyncState !== sync) {\n                \n                // call the callback with true first so the app can stop anything, before receiving the sync data\n                if(!self.lastSyncState && utils.isObject(sync))\n                    callback(null, true);\n                \n                // call on the next CPU cycle, so the actions of the sync stop can be processes first\n                setTimeout(function() {\n                    callback(null, sync);\n                }, 0);\n                \n                self.lastSyncState = sync;\n            }\n        });\n    };\n\n    self.requestManager.startPolling({\n        method: 'eth_syncing',\n        params: [],\n    }, self.pollId, onMessage, self.stopWatching.bind(self));\n\n};\n\nvar IsSyncing = function (requestManager, callback) {\n    this.requestManager = requestManager;\n    this.pollId = 'syncPoll_'+ count++;\n    this.callbacks = [];\n    this.addCallback(callback);\n    this.lastSyncState = false;\n    pollSyncing(this);\n\n    return this;\n};\n\nIsSyncing.prototype.addCallback = function (callback) {\n    if(callback)\n        this.callbacks.push(callback);\n    return this;\n};\n\nIsSyncing.prototype.stopWatching = function () {\n    this.requestManager.stopPolling(this.pollId);\n    this.callbacks = [];\n};\n\nmodule.exports = IsSyncing;\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file namereg.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar globalRegistrarAbi = require('../contracts/GlobalRegistrar.json');\nvar icapRegistrarAbi= require('../contracts/ICAPRegistrar.json');\n\nvar globalNameregAddress = '0xc6d9d2cd449a754c494264e1809c50e34d64562b';\nvar icapNameregAddress = '0xa1a111bc074c9cfa781f0c38e63bd51c91b8af00';\n\nmodule.exports = {\n    global: {\n        abi: globalRegistrarAbi,\n        address: globalNameregAddress\n    },\n    icap: {\n        abi: icapRegistrarAbi,\n        address: icapNameregAddress\n    }\n};\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file transfer.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar Iban = require('./iban');\nvar exchangeAbi = require('../contracts/SmartExchange.json');\n\n/**\n * Should be used to make Iban transfer\n *\n * @method transfer\n * @param {String} from\n * @param {String} to iban\n * @param {Value} value to be tranfered\n * @param {Function} callback, callback\n */\nvar transfer = function (eth, from, to, value, callback) {\n    var iban = new Iban(to); \n    if (!iban.isValid()) {\n        throw new Error('invalid iban address');\n    }\n\n    if (iban.isDirect()) {\n        return transferToAddress(eth, from, iban.address(), value, callback);\n    }\n    \n    if (!callback) {\n        var address = eth.icapNamereg().addr(iban.institution());\n        return deposit(eth, from, address, value, iban.client());\n    }\n\n    eth.icapNamereg().addr(iban.institution(), function (err, address) {\n        return deposit(eth, from, address, value, iban.client(), callback);\n    });\n    \n};\n\n/**\n * Should be used to transfer funds to certain address\n *\n * @method transferToAddress\n * @param {String} from\n * @param {String} to\n * @param {Value} value to be tranfered\n * @param {Function} callback, callback\n */\nvar transferToAddress = function (eth, from, to, value, callback) {\n    return eth.sendTransaction({\n        address: to,\n        from: from,\n        value: value\n    }, callback);\n};\n\n/**\n * Should be used to deposit funds to generic Exchange contract (must implement deposit(bytes32) method!)\n *\n * @method deposit\n * @param {String} from\n * @param {String} to\n * @param {Value} value to be transfered\n * @param {String} client unique identifier\n * @param {Function} callback, callback\n */\nvar deposit = function (eth, from, to, value, client, callback) {\n    var abi = exchangeAbi;\n    return eth.contract(abi).at(to).deposit(client, {\n        from: from,\n        value: value\n    }, callback);\n};\n\nmodule.exports = transfer;\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file db.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar Method = require('../method');\n\nvar DB = function (web3) {\n    this._requestManager = web3._requestManager;\n\n    var self = this;\n    \n    methods().forEach(function(method) { \n        method.attachToObject(self);\n        method.setRequestManager(web3._requestManager);\n    });\n};\n\nvar methods = function () {\n    var putString = new Method({\n        name: 'putString',\n        call: 'db_putString',\n        params: 3\n    });\n\n    var getString = new Method({\n        name: 'getString',\n        call: 'db_getString',\n        params: 2\n    });\n\n    var putHex = new Method({\n        name: 'putHex',\n        call: 'db_putHex',\n        params: 3\n    });\n\n    var getHex = new Method({\n        name: 'getHex',\n        call: 'db_getHex',\n        params: 2\n    });\n\n    return [\n        putString, getString, putHex, getHex\n    ];\n};\n\nmodule.exports = DB;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file shh.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar Method = require('../method');\nvar formatters = require('../formatters');\nvar Filter = require('../filter');\nvar watches = require('./watches');\n\nvar Shh = function (web3) {\n    this._requestManager = web3._requestManager;\n\n    var self = this;\n\n    methods().forEach(function(method) { \n        method.attachToObject(self);\n        method.setRequestManager(self._requestManager);\n    });\n};\n\nShh.prototype.filter = function (fil, callback) {\n    return new Filter(this._requestManager, fil, watches.shh(), formatters.outputPostFormatter, callback);\n};\n\nvar methods = function () { \n\n    var post = new Method({\n        name: 'post', \n        call: 'shh_post', \n        params: 1,\n        inputFormatter: [formatters.inputPostFormatter]\n    });\n\n    var newIdentity = new Method({\n        name: 'newIdentity',\n        call: 'shh_newIdentity',\n        params: 0\n    });\n\n    var hasIdentity = new Method({\n        name: 'hasIdentity',\n        call: 'shh_hasIdentity',\n        params: 1\n    });\n\n    var newGroup = new Method({\n        name: 'newGroup',\n        call: 'shh_newGroup',\n        params: 0\n    });\n\n    var addToGroup = new Method({\n        name: 'addToGroup',\n        call: 'shh_addToGroup',\n        params: 0\n    });\n\n    return [\n        post,\n        newIdentity,\n        hasIdentity,\n        newGroup,\n        addToGroup\n    ];\n};\n\nmodule.exports = Shh;\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file eth.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar utils = require('../../utils/utils');\nvar Property = require('../property');\n\nvar Net = function (web3) {\n    this._requestManager = web3._requestManager;\n\n    var self = this;\n\n    properties().forEach(function(p) { \n        p.attachToObject(self);\n        p.setRequestManager(web3._requestManager);\n    });\n};\n\n/// @returns an array of objects describing web3.eth api properties\nvar properties = function () {\n    return [\n        new Property({\n            name: 'listening',\n            getter: 'net_listening'\n        }),\n        new Property({\n            name: 'peerCount',\n            getter: 'net_peerCount',\n            outputFormatter: utils.toDecimal\n        })\n    ];\n};\n\nmodule.exports = Net;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file eth.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @author Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n\n\"use strict\";\n\nvar Method = require('../method');\nvar Property = require('../property');\nvar formatters = require('../formatters');\n\nfunction Personal(web3) {\n    this._requestManager = web3._requestManager;\n\n    var self = this;\n\n    methods().forEach(function(method) {\n        method.attachToObject(self);\n        method.setRequestManager(self._requestManager);\n    });\n\n    properties().forEach(function(p) {\n        p.attachToObject(self);\n        p.setRequestManager(self._requestManager);\n    });\n}\n\nvar methods = function () {\n    var newAccount = new Method({\n        name: 'newAccount',\n        call: 'personal_newAccount',\n        params: 1,\n        inputFormatter: [null]\n    });\n\n    var unlockAccount = new Method({\n        name: 'unlockAccount',\n        call: 'personal_unlockAccount',\n        params: 3,\n        inputFormatter: [formatters.inputAddressFormatter, null, null]\n    });\n\n    var sendTransaction = new Method({\n        name: 'sendTransaction',\n        call: 'personal_sendTransaction',\n        params: 2,\n        inputFormatter: [formatters.inputTransactionFormatter, null]\n    });\n\n    var lockAccount = new Method({\n        name: 'lockAccount',\n        call: 'personal_lockAccount',\n        params: 1,\n        inputFormatter: [formatters.inputAddressFormatter]\n    });\n\n    return [\n        newAccount,\n        unlockAccount,\n        sendTransaction,\n        lockAccount\n    ];\n};\n\nvar properties = function () {\n    return [\n        new Property({\n            name: 'listAccounts',\n            getter: 'personal_listAccounts'\n        })\n    ];\n};\n\n\nmodule.exports = Personal;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file bzz.js\n * @author Alex Beregszaszi <alex@rtfs.hu>\n * @date 2016\n *\n * Reference: https://github.com/ethereum/go-ethereum/blob/swarm/internal/web3ext/web3ext.go#L33\n */\n\n\"use strict\";\n\nvar Method = require('../method');\nvar Property = require('../property');\n\nfunction Swarm(web3) {\n    this._requestManager = web3._requestManager;\n\n    var self = this;\n\n    methods().forEach(function(method) {\n        method.attachToObject(self);\n        method.setRequestManager(self._requestManager);\n    });\n\n    properties().forEach(function(p) {\n        p.attachToObject(self);\n        p.setRequestManager(self._requestManager);\n    });\n}\n\nvar methods = function () {\n    var blockNetworkRead = new Method({\n        name: 'blockNetworkRead',\n        call: 'bzz_blockNetworkRead',\n        params: 1,\n        inputFormatter: [null]\n    });\n\n    var syncEnabled = new Method({\n        name: 'syncEnabled',\n        call: 'bzz_syncEnabled',\n        params: 1,\n        inputFormatter: [null]\n    });\n\n    var swapEnabled = new Method({\n        name: 'swapEnabled',\n        call: 'bzz_swapEnabled',\n        params: 1,\n        inputFormatter: [null]\n    });\n\n    var download = new Method({\n        name: 'download',\n        call: 'bzz_download',\n        params: 2,\n        inputFormatter: [null, null]\n    });\n\n    var upload = new Method({\n        name: 'upload',\n        call: 'bzz_upload',\n        params: 2,\n        inputFormatter: [null, null]\n    });\n\n    var retrieve = new Method({\n        name: 'retrieve',\n        call: 'bzz_retrieve',\n        params: 1,\n        inputFormatter: [null]\n    });\n\n    var store = new Method({\n        name: 'store',\n        call: 'bzz_store',\n        params: 2,\n        inputFormatter: [null, null]\n    });\n\n    var get = new Method({\n        name: 'get',\n        call: 'bzz_get',\n        params: 1,\n        inputFormatter: [null]\n    });\n\n    var put = new Method({\n        name: 'put',\n        call: 'bzz_put',\n        params: 2,\n        inputFormatter: [null, null]\n    });\n\n    var modify = new Method({\n        name: 'modify',\n        call: 'bzz_modify',\n        params: 4,\n        inputFormatter: [null, null, null, null]\n    });\n\n    return [\n        blockNetworkRead,\n        syncEnabled,\n        swapEnabled,\n        download,\n        upload,\n        retrieve,\n        store,\n        get,\n        put,\n        modify\n    ];\n};\n\nvar properties = function () {\n    return [\n        new Property({\n            name: 'hive',\n            getter: 'bzz_hive'\n        }),\n        new Property({\n            name: 'info',\n            getter: 'bzz_info'\n        })\n    ];\n};\n\n\nmodule.exports = Swarm;\n","\n\nvar Settings = function () {\n    this.defaultBlock = 'latest';\n    this.defaultAccount = undefined;\n};\n\nmodule.exports = Settings;\n\n","var formatters = require('./formatters');\nvar utils = require('./../utils/utils');\nvar Method = require('./method');\nvar Property = require('./property');\n\n// TODO: refactor, so the input params are not altered.\n// it's necessary to make same 'extension' work with multiple providers\nvar extend = function (web3) {\n    /* jshint maxcomplexity:5 */\n    var ex = function (extension) {\n\n        var extendedObject;\n        if (extension.property) {\n            if (!web3[extension.property]) {\n                web3[extension.property] = {};\n            }\n            extendedObject = web3[extension.property];\n        } else {\n            extendedObject = web3;\n        }\n\n        if (extension.methods) {\n            extension.methods.forEach(function (method) {\n                method.attachToObject(extendedObject);\n                method.setRequestManager(web3._requestManager);\n            });\n        }\n\n        if (extension.properties) {\n            extension.properties.forEach(function (property) {\n                property.attachToObject(extendedObject);\n                property.setRequestManager(web3._requestManager);\n            });\n        }\n    };\n\n    ex.formatters = formatters; \n    ex.utils = utils;\n    ex.Method = Method;\n    ex.Property = Property;\n\n    return ex;\n};\n\n\n\nmodule.exports = extend;\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** \n * @file batch.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar Jsonrpc = require('./jsonrpc');\nvar errors = require('./errors');\n\nvar Batch = function (web3) {\n    this.requestManager = web3._requestManager;\n    this.requests = [];\n};\n\n/**\n * Should be called to add create new request to batch request\n *\n * @method add\n * @param {Object} jsonrpc requet object\n */\nBatch.prototype.add = function (request) {\n    this.requests.push(request);\n};\n\n/**\n * Should be called to execute batch request\n *\n * @method execute\n */\nBatch.prototype.execute = function () {\n    var requests = this.requests;\n    this.requestManager.sendBatch(requests, function (err, results) {\n        results = results || [];\n        requests.map(function (request, index) {\n            return results[index] || {};\n        }).forEach(function (result, index) {\n            if (requests[index].callback) {\n\n                if (!Jsonrpc.isValidResponse(result)) {\n                    return requests[index].callback(errors.InvalidResponse(result));\n                }\n\n                requests[index].callback(null, (requests[index].format ? requests[index].format(result.result) : result.result));\n            }\n        });\n    }); \n};\n\nmodule.exports = Batch;\n\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file httpprovider.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n *   Marian Oancea <marian@ethdev.com>\n *   Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n\n\nvar errors = require('./errors');\n\n// workaround to use httpprovider in different envs\n\n// browser\nif (typeof window !== 'undefined' && window.XMLHttpRequest) {\n    XMLHttpRequest = window.XMLHttpRequest; // jshint ignore: line\n// node\n} else {\n    XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest; // jshint ignore: line\n}\n\nvar XHR2 = require('xhr2'); // jshint ignore: line\n\n/**\n * HttpProvider should be used to send rpc calls over http\n */\nvar HttpProvider = function (host, timeout) {\n    this.host = host || 'http://localhost:8545';\n    this.timeout = timeout || 0;\n};\n\n/**\n * Should be called to prepare new XMLHttpRequest\n *\n * @method prepareRequest\n * @param {Boolean} true if request should be async\n * @return {XMLHttpRequest} object\n */\nHttpProvider.prototype.prepareRequest = function (async) {\n    var request;\n\n    if (async) {\n      request = new XHR2();\n      request.timeout = this.timeout;\n    }else {\n      request = new XMLHttpRequest();\n    }\n\n    request.open('POST', this.host, async);\n    request.setRequestHeader('Content-Type','application/json');\n    return request;\n};\n\n/**\n * Should be called to make sync request\n *\n * @method send\n * @param {Object} payload\n * @return {Object} result\n */\nHttpProvider.prototype.send = function (payload) {\n    var request = this.prepareRequest(false);\n\n    try {\n        request.send(JSON.stringify(payload));\n    } catch(error) {\n        throw errors.InvalidConnection(this.host);\n    }\n\n    var result = request.responseText;\n\n    try {\n        result = JSON.parse(result);\n    } catch(e) {\n        throw errors.InvalidResponse(request.responseText);\n    }\n\n    return result;\n};\n\n/**\n * Should be used to make async request\n *\n * @method sendAsync\n * @param {Object} payload\n * @param {Function} callback triggered on end with (err, result)\n */\nHttpProvider.prototype.sendAsync = function (payload, callback) {\n    var request = this.prepareRequest(true);\n\n    request.onreadystatechange = function() {\n        if (request.readyState === 4 && request.timeout !== 1) {\n            var result = request.responseText;\n            var error = null;\n\n            try {\n                result = JSON.parse(result);\n            } catch(e) {\n                error = errors.InvalidResponse(request.responseText);\n            }\n\n            callback(error, result);\n        }\n    };\n\n    request.ontimeout = function() {\n      callback(errors.ConnectionTimeout(this.timeout));\n    };\n\n    try {\n        request.send(JSON.stringify(payload));\n    } catch(error) {\n        callback(errors.InvalidConnection(this.host));\n    }\n};\n\n/**\n * Synchronously tries to make Http request\n *\n * @method isConnected\n * @return {Boolean} returns true if request haven't failed. Otherwise false\n */\nHttpProvider.prototype.isConnected = function() {\n    try {\n        this.send({\n            id: 9999999999,\n            jsonrpc: '2.0',\n            method: 'net_listening',\n            params: []\n        });\n        return true;\n    } catch(e) {\n        return false;\n    }\n};\n\nmodule.exports = HttpProvider;\n","'use strict';\n\n// go env doesn't have and need XMLHttpRequest\nif (typeof XMLHttpRequest === 'undefined') {\n    exports.XMLHttpRequest = {};\n} else {\n    exports.XMLHttpRequest = XMLHttpRequest; // jshint ignore:line\n}\n\n","module.exports = XMLHttpRequest;\n","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file ipcprovider.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n\n\"use strict\";\n\nvar utils = require('../utils/utils');\nvar errors = require('./errors');\n\n\nvar IpcProvider = function (path, net) {\n    var _this = this;\n    this.responseCallbacks = {};\n    this.path = path;\n    \n    this.connection = net.connect({path: this.path});\n\n    this.connection.on('error', function(e){\n        console.error('IPC Connection Error', e);\n        _this._timeout();\n    });\n\n    this.connection.on('end', function(){\n        _this._timeout();\n    }); \n\n\n    // LISTEN FOR CONNECTION RESPONSES\n    this.connection.on('data', function(data) {\n        /*jshint maxcomplexity: 6 */\n\n        _this._parseResponse(data.toString()).forEach(function(result){\n\n            var id = null;\n\n            // get the id which matches the returned id\n            if(utils.isArray(result)) {\n                result.forEach(function(load){\n                    if(_this.responseCallbacks[load.id])\n                        id = load.id;\n                });\n            } else {\n                id = result.id;\n            }\n\n            // fire the callback\n            if(_this.responseCallbacks[id]) {\n                _this.responseCallbacks[id](null, result);\n                delete _this.responseCallbacks[id];\n            }\n        });\n    });\n};\n\n/**\nWill parse the response and make an array out of it.\n\n@method _parseResponse\n@param {String} data\n*/\nIpcProvider.prototype._parseResponse = function(data) {\n    var _this = this,\n        returnValues = [];\n    \n    // DE-CHUNKER\n    var dechunkedData = data\n        .replace(/\\}[\\n\\r]?\\{/g,'}|--|{') // }{\n        .replace(/\\}\\][\\n\\r]?\\[\\{/g,'}]|--|[{') // }][{\n        .replace(/\\}[\\n\\r]?\\[\\{/g,'}|--|[{') // }[{\n        .replace(/\\}\\][\\n\\r]?\\{/g,'}]|--|{') // }]{\n        .split('|--|');\n\n    dechunkedData.forEach(function(data){\n\n        // prepend the last chunk\n        if(_this.lastChunk)\n            data = _this.lastChunk + data;\n\n        var result = null;\n\n        try {\n            result = JSON.parse(data);\n\n        } catch(e) {\n\n            _this.lastChunk = data;\n\n            // start timeout to cancel all requests\n            clearTimeout(_this.lastChunkTimeout);\n            _this.lastChunkTimeout = setTimeout(function(){\n                _this._timeout();\n                throw errors.InvalidResponse(data);\n            }, 1000 * 15);\n\n            return;\n        }\n\n        // cancel timeout and set chunk to null\n        clearTimeout(_this.lastChunkTimeout);\n        _this.lastChunk = null;\n\n        if(result)\n            returnValues.push(result);\n    });\n\n    return returnValues;\n};\n\n\n/**\nGet the adds a callback to the responseCallbacks object,\nwhich will be called if a response matching the response Id will arrive.\n\n@method _addResponseCallback\n*/\nIpcProvider.prototype._addResponseCallback = function(payload, callback) {\n    var id = payload.id || payload[0].id;\n    var method = payload.method || payload[0].method;\n\n    this.responseCallbacks[id] = callback;\n    this.responseCallbacks[id].method = method;\n};\n\n/**\nTimeout all requests when the end/error event is fired\n\n@method _timeout\n*/\nIpcProvider.prototype._timeout = function() {\n    for(var key in this.responseCallbacks) {\n        if(this.responseCallbacks.hasOwnProperty(key)){\n            this.responseCallbacks[key](errors.InvalidConnection('on IPC'));\n            delete this.responseCallbacks[key];\n        }\n    }\n};\n\n\n/**\nCheck if the current connection is still valid.\n\n@method isConnected\n*/\nIpcProvider.prototype.isConnected = function() {\n    var _this = this;\n\n    // try reconnect, when connection is gone\n    if(!_this.connection.writable)\n        _this.connection.connect({path: _this.path});\n\n    return !!this.connection.writable;\n};\n\nIpcProvider.prototype.send = function (payload) {\n\n    if(this.connection.writeSync) {\n        var result;\n\n        // try reconnect, when connection is gone\n        if(!this.connection.writable)\n            this.connection.connect({path: this.path});\n\n        var data = this.connection.writeSync(JSON.stringify(payload));\n\n        try {\n            result = JSON.parse(data);\n        } catch(e) {\n            throw errors.InvalidResponse(data);                \n        }\n\n        return result;\n\n    } else {\n        throw new Error('You tried to send \"'+ payload.method +'\" synchronously. Synchronous requests are not supported by the IPC provider.');\n    }\n};\n\nIpcProvider.prototype.sendAsync = function (payload, callback) {\n    // try reconnect, when connection is gone\n    if(!this.connection.writable)\n        this.connection.connect({path: this.path});\n\n\n    this.connection.write(JSON.stringify(payload));\n    this._addResponseCallback(payload, callback);\n};\n\nmodule.exports = IpcProvider;\n\n"],"sourceRoot":""}